#+author: Karolos Triantafyllou
#+title: GNU Emacs Configuration

* Table of Contents :TOC:
- [[#top-comments][Top Comments]]
- [[#emacs-initialization][Emacs Initialization]]
  - [[#package-sources][Package Sources]]
  - [[#packages][Packages]]
- [[#startup][Startup]]
  - [[#authentication][Authentication]]
  - [[#better-defaults][Better defaults]]
  - [[#better-file-management-with-xdg][Better file management with XDG]]
  - [[#customization][Customization]]
- [[#ui][UI]]
  - [[#turn-off-mouse-interface][Turn off mouse interface]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#icons][Icons]]
  - [[#windows][Windows]]
- [[#ux][UX]]
  - [[#ivy][Ivy]]
  - [[#auto-revert][Auto-revert]]
  - [[#undo-tree][Undo-tree]]
  - [[#auto-completion][Auto-completion]]
  - [[#whitespaces][Whitespaces]]
  - [[#word-wrap][Word-wrap]]
  - [[#alert][Alert]]
  - [[#buffers][Buffers]]
  - [[#paradox][Paradox]]
- [[#helper-packages][Helper Packages]]
  - [[#which-key][Which key]]
  - [[#helpful][Helpful]]
  - [[#passwords][Passwords]]
  - [[#try][Try]]
  - [[#auto-update][Auto-update]]
  - [[#smart-parentheses][Smart Parentheses]]
  - [[#backups][Backups]]
  - [[#dired][Dired]]
  - [[#multiple-cursors][Multiple cursors]]
  - [[#recent-files][Recent Files]]
  - [[#move-text][Move text]]
  - [[#navigation][Navigation]]
  - [[#helpful-1][Helpful]]
  - [[#spelling][Spelling]]
  - [[#flyspell][Flyspell]]
  - [[#spell-checker][Spell Checker]]
  - [[#grammar-checker][Grammar Checker]]
  - [[#history][History]]
  - [[#highlight-indentation][Highlight indentation]]
  - [[#hydra][Hydra]]
- [[#extra-useability][Extra Useability]]
  - [[#browser][Browser]]
  - [[#search-engine-mode][Search engine mode]]
  - [[#calculator][Calculator]]
  - [[#calendar][Calendar]]
  - [[#dashboard][Dashboard]]
  - [[#gnu-plot][GNU Plot]]
  - [[#wiki-summary][wiki-summary]]
  - [[#epub][EPUB]]
  - [[#dired-1][Dired]]
- [[#automatic-tangle][Automatic tangle]]
- [[#org][Org]]
  - [[#org-1][Org]]
  - [[#org-bullets][Org Bullets]]
  - [[#org-toc][Org-toc]]
  - [[#org-indent][Org Indent]]
  - [[#agenda][Agenda]]
  - [[#capture][Capture]]
  - [[#clock][Clock]]
  - [[#contacts][Contacts]]
  - [[#customization-1][Customization]]
  - [[#encryptiondecryption][Encryption/Decryption]]
  - [[#journal][Journal]]
  - [[#languages][Languages]]
- [[#linters][Linters]]
- [[#programming][Programming]]
  - [[#general][General]]
  - [[#projects][Projects]]
  - [[#languages-1][Languages]]
  - [[#helpful-functions][Helpful functions]]

* Top Comments

#+begin_src emacs-lisp :tangle yes
  ;;; package --- Summary
  ;;; Commentary:
  ;;; Code:
#+end_src

* Emacs Initialization

** Package Sources

#+begin_src emacs-lisp :tangle yes
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "http://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")))
#+end_src

** Packages

*** use-package

#+begin_src emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+end_src

*** Delight and Diminish

#+begin_src emacs-lisp :tangle yes
  (use-package delight :ensure t)
  (use-package diminish :ensure t)
#+end_src

*** Ensure packages exist

#+begin_src emacs-lisp :tangle yes
  (use-package use-package-ensure-system-package :ensure t)
#+end_src

* Startup

** Authentication

#+begin_src emacs-lisp :tangle yes
  (setq auth-sources '("~/.config/gnupg/shared/authinfo.gpg"
                       "~/.authinfo.gpg"
                       "~/.authinfo"
                       "~/.netrc"))
#+end_src

** Better defaults

#+begin_src emacs-lisp :tangle yes
    (setq-default
     ad-redefinition-action 'accept
     cursor-in-non-selected-windows t
     display-time-default-load-average nil
     fill-column 120
     help-window-select t
     indent-tabs-mode nil
     inhibit-startup-screen t
     initial-scratch-message ""
     kill-ring-max 128
     mark-ring-max 128
     load-prefer-newer t
     read-process-output-max (* 1024 1024)
     scroll-conservatively most-positive-fixnum
     select-enable-clipboard t
     tab-width 4
     use-package-always-ensure t
     user-full-name "Karolos Triantafyllou"
     user-mail-address "karolos.triantafyllou@gmail.com"
     vc-follow-symlinks t
     view-read-only t
     c-default-style "bsd"
     c-basic-offset 4
     delete-selection-mode 1)
    (cd "~/")
    (column-number-mode 1)
    (global-display-line-numbers-mode)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-hl-line-mode)
    (set-default-coding-systems 'utf-8)
    (show-paren-mode 1)
#+end_src

** Better file management with XDG

#+begin_src shell
  mkdir ~/.cache/emacs ~/.local/share/emacs/
#+end_src

#+begin_src emacs-lisp :tangle yes
  (defvar xdg-bin (getenv "XDG_BIN_HOME")
    "The XDG bin base directory.")
  (defvar xdg-cache (getenv "XDG_CACHE_HOME")
    "The XDG cache base directory.")
  (defvar xdg-config (getenv "XDG_CONFIG_HOME")
    "The XDG config base directory.")
  (defvar xdg-data (getenv "XDG_DATA_HOME")
    "The XDG data base directory.")
  (defvar xdg-lib (getenv "XDG_LIB_HOME")
    "The XDG lib base directory.")
#+end_src

** Customization

#+begin_src emacs-lisp :tangle yes
  (setq-default
    auto-save-list-file-name (expand-file-name (format "%s/emacs/auto-save-list" xdg-data))
    custom-file (expand-file-name (format "%s/emacs/custom.el" xdg-data)))

  (when (file-exists-p custom-file)
    (load custom-file t))
#+End_src

* UI

** Turn off mouse interface

#+begin_src emacs-lisp :tangle yes
  (when window-system
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (tab-bar-mode -1)
    (tab-line-mode -1))
#+end_src

** Fonts

#+begin_src emacs-lisp :tangle yes
  (set-face-attribute 'default nil :font "Source Code Pro Medium")
  (set-fontset-font t 'latin "Noto Sans")
#+end_src

#+begin_src shell
  fc-list | grep "Source Code Pro Medium"
#+end_src

** Theme

*** Doom Theme

#+begin_src emacs-lisp :tangle yes
  (use-package doom-themes
    :config (load-theme 'doom-nord t))
#+end_src

*** Doom Modeline

#+begin_src emacs-lisp :tangle yes
  (use-package doom-modeline
    :defer 0.1
    :config (doom-modeline-mode))
#+end_src

*** Solaire mode

#+begin_src emacs-lisp :tangle yes
  (use-package solaire-mode
    :custom (solaire-mode-remap-fringe t)
    :config
    (solaire-global-mode +1))
#+end_src

** Icons

#+begin_src emacs-lisp :tangle yes
  (use-package all-the-icons
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :config (unless (find-font (font-spec :name "all-the-icons"))
              (all-the-icons-install-fonts t)))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** Windows

*** Winner

#+begin_src emacs-lisp :tangle yes
  (use-package winner
    :config (winner-mode 1))
#+end_src

*** Windmove

#+begin_src emacs-lisp :tangle yes
  (use-package windmove
    :bind (("C-c h" . windmove-left)
           ("C-c j" . windmove-down)
           ("C-c k" . windmove-up)
           ("C-c l" . windmove-right)))
#+end_src

*** Center Window

#+begin_src emacs-lisp :tangle yes
  (use-package centered-window
  :defer 0.8
  :custom
  (cwm-centered-window-width 130)
  (cwm-incremental-padding t)
  (cwm-incremental-padding-% 2)
  (cwm-left-fringe-ratio 0)
  (cwm-frame-internal-border 0)
  (cwm-use-vertical-padding t)
  :config (centered-window-mode t))
#+end_src

*** Switch window

#+begin_src emacs-lisp :tangle yes
  (use-package switch-window
    :bind (("C-x o" . switch-window)
           ("C-x w" . switch-window-then-swap-buffer)))
#+end_src

*** Splitting windows

#+begin_src emacs-lisp :tangle yes
  (use-package window
    :ensure nil
    :bind (("C-x 3" . hsplit-last-buffer)
           ("C-x 2" . vsplit-last-buffer))
    :preface
    (defun hsplit-last-buffer ()
      "Gives the focus to the last created horizontal window."
      (interactive)
      (split-window-horizontally)
      (other-window 1))

    (defun vsplit-last-buffer ()
      "Gives the focus to the last created vertical window."
      (interactive)
      (split-window-vertically)
      (other-window 1)))
#+end_src
* UX

** Ivy

*** Ivy
#+begin_src emacs-lisp :tangle yes
  (use-package ivy
    :diminish
    :after ivy-rich
    :bind (("C-x b" . ivy-switch-buffer)
           ("C-x B" . ivy-switch-buffer-other-window)
           ("M-H" . ivy-resume)
           :map ivy-minibuffer-map
           ("<tab>" . ivy-alt-done)
           ("C-i" . ivy-partial-or-done)
           ("S-SPC" . nil)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-switch-buffer-kill))
    :custom
    (ivy-case-fold-search-default t)
    (ivy-count-format "(%d/%d) ")
    (ivy-re-builders-alist '((t . ivy--regex-plus)))
    (ivy-use-virtual-buffers t)
    :config (ivy-mode))
#+end_src

*** Counsel

#+begin_src emacs-lisp :tangle yes
  (use-package counsel
    :after ivy
    :diminish
    :bind(("C-x C-d" . counsel-dired-jump)
          ("C-x C-h" . counsel-minibuffer-history)
          ("C-x C-l" . counsel-find-library)
          ("C-x C-r" . counsel-recentf)
          ("C-x C-u" . counsel-unicode-char)
          ("C-x C-v" . counsel-set-variable))
    :config (counsel-mode)
    :custom (counsel-rg-base-command "rg -S -M 150 --no-heading --line-number --color never %s"))
#+end_src

*** Swiper

#+begin_src emacs-lisp :tangle yes
  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           :map swiper-map
           ("M-%" . swiper-query-replace)))
#+end_src

*** Ivy-rich

#+begin_src emacs-lisp :tangle yes
  (use-package ivy-rich
    :config
    (ivy-rich-mode 1))
#+end_src

*** Counsel-Projectile

#+begin_src emacs-lisp :tangle yes
  (use-package counsel-projectile
    :after (counsel projectile)
    :config (counsel-projectile-mode 1))
#+end_src

** Auto-revert

#+begin_src emacs-lisp :tangle yes
  (use-package autorevert
    :diminish
    :bind ("C-x R" . revert-buffer)
    :custom (auto-rever-verbose nil)
    :config (global-auto-revert-mode 1))
#+end_src

** Undo-tree

#+begin_src emacs-lisp :tangle yes
  (use-package undo-tree
    :diminish
    :bind ("C--" . undo-tree-redo)
    :init (global-undo-tree-mode)
    :custom
    (undo-tree-visualizer-timestamps t)
    (undo-tree-visualizer-diff t))
#+end_src

** Auto-completion

*** Company

#+begin_src emacs-lisp :tangle yes
  (use-package company
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay 0)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))
#+end_src

*** Company-box

#+begin_src emacs-lisp :tangle yes
  (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

** Whitespaces

*** Whitespaces

#+begin_src emacs-lisp :tangle yes
  (use-package simple
    :ensure nil
    :hook (before-save . delete-trailing-whitespace))
#+end_src

*** Hungry Delete

#+begin_src emacs-lisp :tangle yes
  (use-package hungry-delete
    :diminish
    :config (global-hungry-delete-mode))
#+end_src

** Word-wrap

#+begin_src emacs-lisp :tangle yes
  (use-package simple
    :ensure nil
    :delight (auto-fill-function)
    :bind ("C-x p" . pop-to-mark-command)
    :hook ((prog-mode . turn-on-auto-fill)
           (text-mode . turn-on-auto-fill))
    :custom (set-mark-command-repeat-pop t))
#+end_src

** Alert

#+begin_src emacs-lisp :tangle yes
  (use-package alert
    :custom (alert-default-style 'libnotify))
#+end_src

** Buffers

#+begin_src emacs-lisp :tangle yes
  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer))

  (use-package ibuffer-projectile
    :after ibuffer
    :preface
    (defun my/ibuffer-projectile ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic)))
    :hook (ibuffer . my/ibuffer-projectile))

  (defvar *protected-buffers* '("*scratch*" "*Messages*")
    "Buffers that cannot be killed.")

  (defun my/protected-buffers ()
    "Protects some buffers from being killed."
    (dolist (buffer *protected-buffers*)
      (with-current-buffer buffer
        (emacs-lock-mode 'kill))))

  (add-hook 'after-init-hook #'my/protected-buffers)
#+end_src

** Paradox

#+begin_src emacs-lisp :tangle yes
(use-package paradox
  :defer 1
  :custom
  (paradox-column-width-package 27)
  (paradox-column-width-version 13)
  (paradox-execute-asynchronously t)
  (paradox-hide-wiki-packages t)
  :config
  (paradox-enable)
  (remove-hook 'paradox-after-execute-functions #'paradox--report-buffer-print))
#+end_src

* Helper Packages

** Which key

#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :defer 0.2
    :diminish
    :custom which-key-idle-delay 0.5
    :config (which-key-mode))
#+end_src

** Helpful

#+begin_src emacs-lisp :tangle yes
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Passwords

#+begin_src emacs-lisp :tangle yes
  (use-package ivy-pass
    :after ivy
    :commands ivy-pass)
#+end_src

** Try

#+begin_src emacs-lisp :tangle yes
(use-package try)
#+end_src

** Auto-update

#+begin_src emacs-lisp :tangle yes
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+end_src

** Smart Parentheses

#+begin_src emacs-lisp :tangle yes
  (use-package smartparens
    :diminish
    :custom (sp-escape-quotes-after-insert nil)
    :config (smartparens-global-mode 1))
#+end_src

** Backups

#+begin_src emacs-lisp :tangle yes
  ;; (use-package files
  ;;   :ensure nil
  ;;   :preface
  ;;   (defvar *afilename-cmd*
  ;;     `((,(format "%s/X11/Xresources" xdg-config) . ,(format "xrdb -merge %s/X11/Xresources" xdg-config))
  ;;       (,(format "%s/xbindkeysrc" (getenv "HOME")) . "xbindkeys -p"))
  ;;     "File association list with their respective command.")

  ;;   (defun my/cmd-after-saved-file ()
  ;;     "Execute a command after saved a specific file."
  ;;     (let* ((match (assoc (buffer-file-name) *afilename-cmd*)))
  ;;       (when match
  ;;         (shell-command (cdr match)))))
  ;;   :hook (after-save . my/cmd-after-saved-file)
  ;;   :custom
  ;;   (backup-directory-alist `(("." . ,(expand-file-name (format "%s/emacs/backups/" xdg-data)))))
  ;;   (delete-old-versions -1)
  ;;   (vc-make-backup-files t)
  ;;   (version-control t))
#+end_src

** Dired

#+begin_src emacs-lisp :tangle yes
(use-package dired
  :ensure nil
  :delight "Dired "
  :custom
  (dired-auto-revert-buffer t)
  (dired-dwim-target t)
  (dired-hide-details-hide-symlink-targets nil)
  (dired-listing-switches "-alh")
  (dired-ls-F-marks-symlinks nil)
  (dired-recursive-copies 'always))

(use-package dired-narrow
  :bind (("C-c C-n" . dired-narrow)
         ("C-c C-f" . dired-narrow-fuzzy)
         ("C-c C-r" . dired-narrow-regexp)))

(use-package dired-subtree
  :bind (:map dired-mode-map
              ("<backtab>" . dired-subtree-cycle)
              ("<tab>" . dired-subtree-toggle)))
#+end_src

** Multiple cursors

#+begin_src emacs-lisp :tangle yes
    (use-package multiple-cursors
      :bind (("C-S-c C-S-c" . mc/edit-lines)))
#+end_src

** Recent Files

#+begin_src emacs-lisp :tangle yes
  (use-package recentf
    :bind ("C-c r" . recentf-open-files)
    :init (recentf-mode)
    :custom
    (recentf-exclude (list "COMMINT_EDITMSG"
                           "~$"
                           "/scp:"
                           "/ssh:"
                           "/sudo:"
                           "/tmp/"))
    (recentf-max-menu-items 15)
    (recentf-max-saved-items 200)
    (recentf-save-file (expand-file-name (format "%s/emacs/recentf" xdg-cache)))
    :config (run-at-time nil (* 5 60) 'recentf-save-list))
#+end_src

** Move text

#+begin_src emacs-lisp :tangle yes
  (use-package move-text
    :bind (("M-p" . move-text-up)
           ("M-n" . move-text-down))
    :config (move-text-default-bindings))
#+end_src

** Navigation

#+begin_src emacs-lisp :tangle yes
  (defun my/smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is aldeady ther, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG -1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  (global-set-key (kbd "C-a") 'my/smarter-move-beginning-of-line)

  (use-package imenu
    :ensure nil
    :bind ("C-r" . imenu))
#+end_src

** Helpful

#+begin_src emacs-lisp :tangle yes
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))
#+end_src

** Spelling

#+begin_src emacs-lisp :tangle yes
  (use-package abbrev
    :ensure nil
    :diminish
    :hook (text-mode . abbrev-mode)
    :custom (abbrev-file-name (expand-file-name (format "%s/emacs/abbrev_defs" xdg-data)))
    :config
    (if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file)))
#+end_src

** Flyspell

#+begin_src emacs-lisp :tangle yes
  (use-package flyspell
    :diminish
    :hook ((markdown-mode org-mode text-mode) . flyspell-mode)
    (prog-mode . flyspell-prog-mode)
    :custom
    (flyspell-abbrev-p t)
    (flyspell-default-dictionary "en_US")
    (flyspell-issue-message-flag nil)
    (flyspell-issue-welcome-flag nil))

  (use-package flyspell-correct-ivy
    :after (flyspell ivy)
    :init (setq flyspell-correct-interface #'flyspell-correct-ivy))
#+end_src

** Spell Checker

#+begin_src emacs-lisp :tangle yes
  (use-package ispell
      :ensure-system-package (hunspell . "yay -S hunspell")
      :init
      (setenv "LANG" "en_US")
      :custom
      (ispell-local-dictionary "en_US")
      (ispell-local-dictionary-alist
       '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
         ("el_GR" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "el_GR") nil utf-8)))

      (ispell-dictionary "en_US")
      (ispell-dictionary-alist
       '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
         ("el_GR" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "el_GR") nil utf-8)))
      (ispell-program-name (executable-find "hunspell"))
      (ispell-really-hunspell t)
      (ispell-silently-savep t)
      (ispell-extra-args '("--sug-mode=ultra"))
    :preface
    (defun my/switch-language ()
      "Switches between the English and Greek language."
      (interactive)
      (let* ((current-dictionary ispell-current-dictionary)
             (new-dictionary (if (string= current-dictionary "el_GR") "en_US" "el_GR")))
        (ispell-change-dictionary new-dictionary)
        (if (string= new-dictionary "el_GR")
            (langtool-switch-default-language "el")
          (langtool-switch-default-language "en"))

        ;; Clears all the old errors after switching to the new language
        (if (and (boundp 'flyspell-mode) flyspell-mode)
            (flyspell-mode 0)
          (flyspell-mode 1))

        (message "Dictionary switched from %s to %s" current-dictionary new-dictionary))))
#+end_src

** Grammar Checker

#+begin_src emacs-lisp :tangle yes
(use-package langtool
  :diminish
  :custom
  (langtool-default-language "en")
  (langtool-disabled-rules '("COMMA_PARENTHESIS_WHITESPACE"
                             "COPYRIGHT"
                             "DASH_RULE"
                             "EN_QUOTES"
                             "EN_UNPAIRED_BRACKETS"
                             "UPPERCASE_SENTENCE_START"
                             "WHITESPACE_RULE"))
  (langtool-language-tool-jar (expand-file-name
                               (format "%s/LanguageTool-5.1/languagetool-commandline.jar" xdg-lib)))
  (langtool-language-tool-server-jar (expand-file-name
                                      (format "%s/LanguageTool-5.1/languagetool-server.jar" xdg-lib)))
  (langtool-mother-tongue "en"))
#+end_src

** History

#+begin_src emacs-lisp :tangle yes
(use-package savehist
  :ensure nil
  :custom
  (history-delete-duplicates t)
  (history-length t)
  (savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
  (savehist-file (expand-file-name (format "%s/emacs/history" xdg-cache)))
  (savehist-save-minibuffer-history 1)
  :config (savehist-mode 1))
#+end_src

** Highlight indentation

#+begin_src emacs-lisp :tangle yes
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :custom (highlight-indent-guides-method 'character))
#+end_src

** Hydra

#+begin_src emacs-lisp :tangle yes
(use-package hydra
  :bind (("C-c I" . hydra-image/body)
         ("C-c L" . hydra-ledger/body)
         ("C-c M" . hydra-merge/body)
         ("C-c T" . hydra-tool/body)
         ("C-c b" . hydra-btoggle/body)
         ("C-c c" . hydra-clock/body)
         ("C-c f" . hydra-flycheck/body)
         ("C-c g" . hydra-go-to-file/body)
         ("C-c m" . hydra-magit/body)
         ("C-c o" . hydra-org/body)
         ("C-c p" . hydra-projectile/body)
         ("C-c q" . hydra-query/body)
         ("C-c s" . hydra-spelling/body)
         ("C-c t" . hydra-tex/body)
         ("C-c u" . hydra-upload/body)
         ("C-c w" . hydra-windows/body)))

(use-package major-mode-hydra
  :after hydra
  :preface
  (defun with-alltheicon (icon str &optional height v-adjust)
    "Displays an icon from all-the-icon"
    (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-faicon (icon str &optional height v-adjust)
    "Displays an icon from Font Awesome icon."
    (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-fileicon (icon str &optional height v-adjust)
    "Displays an icon from the Atom File Icons package."
    (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-octicon (icon str &optional height v-adjust)
    "Displays an icon from the GitHub Octicons."
    (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str)))
#+end_src

*** Hydra/BToggle

#+begin_src emacs-lisp :tangle yes
(pretty-hydra-define hydra-btoggle
  (:hint nil :color amaranth :quit-key "q" :title (with-faicon "toggle-on" "Toggle" 1 -0.05))
  ("Basic"
   (("a" abbrev-mode "abbrev" :toggle t)
    ("h" global-hungry-delete-mode "hungry delete" :toggle t))
   "Coding"
   (("e" electric-operator-mode "electric operator" :toggle t)
    ("F" flyspell-mode "flyspell" :toggle t)
    ("f" flycheck-mode "flycheck" :toggle t)
    ("l" lsp-mode "lsp" :toggle t)
    ("s" smartparens-mode "smartparens" :toggle t))
   "UI"
   (("i" ivy-rich-mode "ivy-rich" :toggle t))))
#+end_src

*** Hydra/Clock

#+begin_src emacs-lisp :tangle yes
(pretty-hydra-define hydra-clock
  (:hint nil :color teal :quit-key "q" :title (with-faicon "clock-o" "Clock" 1 -0.05))
  ("Action"
   (("c" org-clock-cancel "cancel")
    ("d" org-clock-display "display")
    ("e" org-clock-modify-effort-estimate "effort")
    ("i" org-clock-in "in")
    ("o" org-clock-out "out")
    ("p" org-pomodoro "pomodoro")
    ("r" org-clock-report "report"))))
#+end_src

*** Hydra/Flycheck

#+begin_src emacs-lisp :tangle yes
(pretty-hydra-define hydra-flycheck
  (:hint nil :color teal :quit-key "q" :title (with-faicon "plane" "Flycheck" 1 -0.05))
  ("Checker"
   (("?" flycheck-describe-checker "describe")
    ("d" flycheck-disable-checker "disable")
    ("m" flycheck-mode "mode")
    ("s" flycheck-select-checker "select"))
   "Errors"
   (("<" flycheck-previous-error "previous" :color pink)
    (">" flycheck-next-error "next" :color pink)
    ("f" flycheck-buffer "check")
    ("l" flycheck-list-errors "list"))
   "Other"
   (("M" flycheck-manual "manual")
    ("v" flycheck-verify-setup "verify setup"))))
#+end_src

*** Hydra/Go To

#+begin_src emacs-lisp :tangle yes
    (pretty-hydra-define hydra-go-to-file
      (:hint nil :color teal :quit-key "q" :title (with-octicon "file-symlink-file" "Go To" 1 -0.05))
      ("Agenda"
       (("ac" (find-file "~/.personal/agenda/contacts.org") "contacts")
        ("ao" (find-file "~/.personal/agenda/organizer.org") "organizer")
        ("ap" (find-file "~/.personal/agenda/people.org") "people")
        ("ar" (find-file "~/.personal/agenda/routine.org") "routine")
        ("as" (find-file "~/.personal/agenda/work.org") "work"))
       "Config"
       (("ca" (find-file (format "%s/alacritty/alacritty.yml" xdg-config)) "alacritty")
        ("cA" (find-file (format "%s/sh/aliases" xdg-config)) "aliases")
        ("ce" (find-file "~/.config/emacs/config.org") "emacs")
        ("cE" (find-file (format "%s/sh/environ" xdg-config)) "environ")
        ("cn" (find-file (format "%s/neofetch/config.conf" xdg-config)) "neofetch")
        ("cq" (find-file (format "%s/qutebrowser/config.py" xdg-config)) "qutebrowser")
        ("cr" (find-file (format "%s/ranger/rc.conf" xdg-config)) "ranger")
        ("cs" (find-file (format "%s/sway/config" xdg-config)) "sway")
        ("ct" (find-file (format "%s/tmux/tmux.conf" xdg-config)) "tmux")
        ("cw" (find-file (format "%s/waybar/config" xdg-config)) "waybar")
        ("cW" (find-file (format "%s/wofi/config" xdg-config)) "wofi")
        ("cX" (find-file (format "%s/sh/xdg" xdg-config)) "xdg"))
       "Notes"
       (("na" (find-file (format "~/.personal/notes/affirmations.pdf" xdg-config)) "Affirmations"))
       "Other"
       (("ob" (find-file "~/.personal/other/books.org") "book")
        ("ol" (find-file "~/.personal/other/learning.org") "learning")
        ("om" (find-file "~/.personal/other/movies.org"))
        ("op" (find-file "~/.personal/other/purchases.org") "purchase")
        ("ou" (find-file "~/.personal/other/usb.org") "usb")
        ("os" (find-file "~/.personal/other/short-term-goals.org") "short-term goals")
        ("ol" (find-file "~/.personal/other/long-term-goals.org") "long-term goals"))))
#+end_src

*** Hydra/Image

#+begin_src emacs-lisp :tangle yes
(pretty-hydra-define hydra-image
  (:hint nil :color pink :quit-key "q" :title (with-faicon "file-image-o" "Images" 1 -0.05))
  ("Action"
   (("r" image-rotate "rotate")
   ("s" image-save "save" :color teal))
   "Zoom"
   (("-" image-decrease-size "out")
   ("+" image-increase-size "in")
   ("=" image-transform-reset "reset"))))
#+end_src

*** Hydra/Ledger

#+begin_src emacs-lisp :tangle yes
    (pretty-hydra-define hydra-ledger
      (:hint nil :color teal :quit-key "q" :title (with-faicon "usd" "Ledger" 1 -0.05))
      ("Action"
       (("b" ledger-add-transaction "add")
       ("c" ledger-mode-clean-buffer "clean")
       ("i" ledger-copy-transaction-at-point "copy")
       ("s" ledger-delete-current-transaction "delete")
       ("r" ledger-report "report"))))
#+end_src

*** Hydra/Magit

#+begin_src emacs-lisp :tangle yes
(pretty-hydra-define hydra-magit
  (:hint nil :color teal :quit-key "q" :title (with-octicon "mark-github" "Magit" 1 -0.05))
  ("Action"
   (("b" magit-blame "blame")
   ("c" magit-clone "clone")
   ("i" magit-init "init")
   ("l" magit-log-buffer-file "commit log (current file)")
   ("L" magit-log-current "commit log (project)")
   ("s" magit-status "status"))))
#+end_src

*** Hydra/Merge

#+begin_src emacs-lisp :tangle yes
(pretty-hydra-define hydra-merge
  (:hint nil :color pink :quit-key "q" :title (with-octicon "mark-github" "Merge" 1 -0.05))
  ("Move"
   (("n" smerge-next "next")
    ("p" smerge-prev "previous"))
   "Keep"
   (("RET" smerge-keep-current "current")
    ("a" smerge-keep-all "all")
    ("b" smerge-keep-base "base")
    ("l" smerge-keep-lower "lower")
    ("u" smerge-keep-upper "upper"))
   "Diff"
   (("<" smerge-diff-base-upper "upper/base")
    ("=" smerge-diff-upper-lower "upper/lower")
    (">" smerge-diff-base-lower "base/lower")
    ("R" smerge-refine "redefine")
    ("E" smerge-ediff "ediff"))
   "Other"
   (("C" smerge-combine-with-next-"combine")
    ("r" smerge-resolve "resolve")
    ("k" smerge-kill-current "kill current"))))
#+end_src

*** Hydra/Org

#+begin_src emacs-lisp :tangle yes
(pretty-hydra-define hydra-org
  (:hint nil :color teal :quit-key "q" :title (with-fileicon "org" "Org" 1 -0.05))
  ("Action"
   (("A" my/org-archive-done-tasks "archive")
   ("a" org-agenda "agenda")
   ("c" org-capture "capture")
   ("d" org-decrype-entry "decrypt")
   ("i" org-insert-link-global "insert-link")
   ("j" my/org-jump "jump-task")
   ("k" org-cut-subtree "cut-subtree")
   ("o" org-open-at-point-global "open-link")
   ("r" org-refile "refile")
   ("s" org-store-link "store-link")
   ("t" org-show-todo-tree "todo-tree"))))
#+end_src

*** Hydra/Projectile

#+begin_src emacs-lisp :tangle yes
(pretty-hydra-define hydra-projectile
  (:hint nil :color teal :quit-key "q" :title (with-faicon "rocket" "Projectile" 1 -0.05))
  ("Buffers"
   (("b" counsel-projectile-switch-to-buffer "list")
    ("k" projectile-kill-buffers "kill all")
    ("S" projectile-save-project-buffers "save all"))
   "Find"
   (("d" counsel-projectile-find-dir "directory")
    ("D" projectile-dired "root")
    ("f" counsel-projectile-find-file "file")
    ("p" counsel-projectile-switch-project "project"))
   "Other"
   (("i" projectile-invalidate-cache "reset cache"))
   "Search"
   (("r" projectile-replace "replace")
    ("R" projectile-replace-regexp "regexp replace")
    ("s" counsel-rg "search"))))
#+end_src

*** Hydra/Query

#+begin_src emacs-lisp :tangle yes
(pretty-hydra-define hydra-query
  (:hint nil :color teal :quit-key "q" :title (with-faicon "search" "Engine-Mode" 1 -0.05))
  ("Query"
   (("a" engine/search-amazon "amazon")
   ("d" engine/search-duckduckgo "duckduckgo")
   ("g" engine/search-github "github")
   ("i" engine/search-google-images "google images")
   ("m" engine/search-google-maps "google maps")
   ("s" engine/search-stack-overflow "stack overflow")
   ("w" engine/search-wikipedia "wikipedia")
   ("y" engine/search-youtube "youtube"))))
#+end_src

*** Hydra/Spelling

#+begin_src emacs-lisp :tangle yes
(pretty-hydra-define hydra-spelling
  (:hint nil :color teal :quit-key "q" :title (with-faicon "magic" "Spelling" 1 -0.05))
  ("Checker"
   (("c" langtool-correct-buffer "correction")
   ("C" langtool-check-done "clear")
   ("d" ispell-change-dictionary "dictionary")
   ("l" (message "Current language: %s (%s)" langtool-default-language ispell-current-dictionary) "language")
   ("s" my/switch-language "switch")
   ("w" wiki-summary "wiki"))
   "Errors"
   (("<" flyspell-correct-previous "previous" :color pink)
   (">" flyspell-correct-next "next" :color pink)
   ("f" langtool-check "find"))))
#+end_src

*** Hydra/TeX

#+begin_src emacs-lisp :tangle yes
(pretty-hydra-define hydra-tex
  (:hint nil :color teal :quit-key "q" :title (with-fileicon "tex" "LaTeX" 1 -0.05))
  ("Action"
   (("g" reftex-goto-label "goto")
   ("r" reftex-query-replace-document "replace")
   ("s" counsel-rg "search")
   ("t" reftex-toc "table of contents"))))
#+end_src

*** Hydra/Tool

#+begin_src emacs-lisp :tangle yes
(pretty-hydra-define hydra-tool
  (:hint nil :color teal :quit-key "q" :title (with-faicon "briefcase" "Tool" 1 -0.05))
  ("Network"
   (("c" ipcalc "subnet calculator")
   ("i" ipinfo "ip info"))))
#+end_src

*** Hydra/TypeScript

#+begin_src emacs-lisp :tangle yes
(defhydra hydra-typescript (:color blue)
  "
^
^TypeScript^    ^Do^
^----------^----^--^---------
_q_ quit        _b_ back
^^              _e_ errors
^^              _j_ jump
^^              _r_ references
^^              _R_ restart
^^              ^^
"
  ("q" nil)
  ("b" tide-jump-back)
  ("e" tide-project-errors)
  ("j" tide-jump-to-definition)
  ("r" tide-references)
  ("R" tide-restart-server))
#+end_src

*** Hydra/Upload

#+begin_src emacs-lisp :tangle yes
(pretty-hydra-define hydra-upload
  (:hint nil :color teal :quit-key "q" :title (with-faicon "cloud-upload" "Upload" 1 -0.05))
  ("Action"
   (("b" webpaste-paste-buffer "buffer")
   ("i" imgbb-upload "image")
   ("r" webpaste-paste-region "region"))))
#+end_src

*** Hydra/Windows

#+begin_src emacs-lisp :tangle yes
(pretty-hydra-define hydra-windows
  (:hint nil :foreign-keys warn :quit-key "q" :title (with-faicon "windows" "Windows" 1 -0.05))
  ("Window"
   (("b" balance-windows "balance")
   ("i" enlarge-window "heighten")
   ("j" shrink-window-horizontally "narrow")
   ("k" shrink-window "lower")
   ("l" enlarge-window-horizontally "widen")
   ("s" switch-window-then-swap-buffer "swap" :color teal))
   "Zoom"
   (("-" text-scale-decrease "out")
   ("+" text-scale-increase "in")
   ("=" (text-scale-increase 0) "reset"))))
#+end_src

* Extra Useability

** Browser

#+begin_src emacs-lisp :tangle yes
  (use-package browse-url
    :ensure nil
    :custom
    (browse-url-browser-function 'browse-url-generic)
    (browse-url-generic-program "firefox"))
#+end_src

** Search engine mode

#+begin_src emacs-lisp :tangle yes
(use-package engine-mode
  :config
  (defengine amazon
  "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s"
  :keybinding "a")

  (defengine duckduckgo
  "https://duckduckgo.com/?q=%s"
  :keybinding "d")

  (defengine github
  "https://github.com/search?ref=simplesearch&q=%s"
  :keybinding "g")

  (defengine google-images
  "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbc=2&aq=f&aqi=&aql=&oq=&q=%s"
  :keybinding "i")

  (defengine google-maps
  "https://maps.google.com/maps?q=%s"
  :keybinding "m"
  :docstring "Mappin' it up.")

  (defengine stack-overflow
  "https://stackoverflow.com/search?q=%s"
  :keybinding "s")

  (defengine youtube
  "https://www.youtube.com/results?aq=f&oq=&search_query=%s"
  :keybinding "y")

  (defengine wikipedia
  "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search%s"
  :keybinding "w"
  :docstring "Searching the web.")
  (engine-mode t))
#+end_src

** Calculator

#+begin_src emacs-lisp :tangle yes
  (use-package calc
    :custom
    (math-additional-units
     '((GiB "1024 * MiB" "Giga Byte")
       (MiB "1024 * KiB" "Mega Byte")
       (KiB "1024 * B" "Kilo Byte")
       (B nil "Byte")
       (Gib "1024 * Mib" "Giga Bit")
       (Mib "1024 * Kib" "Mega Bit")
       (Kib "1024 * b" "Kilo Bit")
       (b "B / 8" "Bit")))
    (math-units-table nil))
#+end_src

** Calendar

#+begin_src emacs-lisp :tangle yes
(use-package calendar
  :ensure nil
  :custom (calendar-mark-holidays-flag t))

(use-package holidays
  :ensure nil
  :custom
  (holiday-bahai-holidays nil)
  (holiday-christian-holidays
   '((holiday-fixed 1 6 "Epiphany")
     (holiday-fixed 2 2 "Candlemas")
     (holiday-easter-etc -47 "Mardi Gras")
     (holiday-easter-etc 0 "Easter Day")
     (holiday-easter-etc 1 "Easter Monday")
     (holiday-easter-etc 39 "Ascension")
     (holiday-easter-etc 49 "Pentecost")
     (holiday-fixed 8 15 "Assumption")
     (holiday-fixed 11 1 "All Saints' Day")
     (holiday-fixed 11 2 "Day Of The Dead")
     (holiday-fixed 11 22 "Saint Cecilia's Day")
     (holiday-fixed 12 1 "Saint Eloi's Day")
     (holiday-fixed 12 4 "Saint Barbara")
     (holiday-fixed 12 6 "Saint Nicholas Day")
     (holiday-fixed 12 25 "Christmas Day")))
  (holiday-general-holidays
   '((holiday-fixed 1 1 "New Year's Day")
     (holiday-fixed 2 14 "Valentine's Day")
     (holiday-fixed 10 31 "Halloween")
     (holiday-fixed 11 11 "Armistice of 1918")))
  (holiday-hebrew-holidays nil)
  (holiday-islamic-holidays nil)
  (holiday-local-holidays
   '((holiday-fixed 5 1 "Labor Day")
     (holiday-float 3 0 0 "Grandmothers' Day")
     (holiday-float 4 4 3 "Secretary's Day")
     (holiday-float 5 0 2 "Mother's Day")
     (holiday-float 6 0 3 "Father's Day")))
  (holiday-oriental-holidays nil))
#+end_src

** Dashboard

#+begin_src emacs-lisp :tangle yes
  (use-package dashboard
    :custom
    (dashboard-banner-logo-title "With Great Power Comes Great Responsibility")
    (dashboard-center-content t)
    (dashboard-items '((agenda)
                       (projects . 5)))
    (dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
    (dashboard-set-file-icons t)
    (dashboard-set-footer nil)
    (dashboard-set-heading-icons t)
    (dashboard-set-navigator t)
    (dashboard-startup-banner 'logo)
    :config
    (dashboard-setup-startup-hook))
  #+end_src

** GNU Plot

  #+begin_src emacs-lisp :tangle yes
(use-package gnuplot
  :ensure-system-package gnuplot
  :defer 2)

(use-package gnuplot-mode
  :after gnuplot
  :mode "\\.gp\\'")
#+end_src

** wiki-summary

#+begin_src emacs-lisp :tangle yes
(use-package wiki-summary
  :defer 1
  :preface
  (defun my/format-summary-in-buffer (summary)
    "Given a summary, sticks it in the *wiki-summary* buffer and displays the buffer."
    (let ((buf (generate-new-buffer "*wiki-summary*")))
      (with-current-buffer buf
        (princ summary buf)
        (fill-paragraph)
        (goto-char (point-min))
        (view-mode))
      (pop-to-buffer buf))))

(advice-add 'wiki-summary/format-summary-in-buffer :override #'my/format-summary-in-buffer)
#+end_src

** EPUB

#+begin_src emacs-lisp :tangle yes
    (use-package nov
      :mode ("\\.epub\\'" . nov-mode)
      :custom (nov-text-width 75))
#+end_src

** Dired

#+begin_src emacs-lisp :tangle yes
    (use-package dired
      :ensure nil
      :delight "Dired "
      :custom
      (dired-auto-revert-buffer t)
      (dired-dwim-target t)
      (dired-hide-details-hide-symlink-targets nil)
      (dired-listing-switches "-alh")
      (dired-li-F-marks-symlinks nil)
      (dired-recursive-copies 'always))

    (use-package dired-narrow
      :bind (("C-C C-n" . dired-narrow)
             ("C-c C-f" . dired-narrow-fuzzy)
             ("C-c C-r" . dired-narrow-regexp)))

    (use-package dired-subtree
      :bind (:map dired-mode-map
                  ("<backtab>" . dired-subtree-cycle)
                  ("<tab>" . dired-subtree-toggle)))
#+end_src

* Automatic tangle

#+begin_src emacs-lisp :tangle yes
  (use-package async)

  (defvar *config-file* (expand-file-name "config.org" user-emacs-directory)
    "The configureation file.")

  (defvar *config-last-change* (nth 5 (file-attributes *config-file*))
    "Last modification time of the configuration file.")

  (defvar *show-async-tangle-results* nil
    "Keeps *emacs* async buffers around for later inspaction.")

  (defun my/config-updated ()
    "Check if the configuration file has been updated since the last time."
    (time-less-p *config-last-change*
                 (nth 5 (file-attributes *config-file*))))

  (defun my/config-tangle ()
    "Tangles the org file asynchronously."
    (when (my/config-updated)
      (setq *config-last-change*
            (nth 5 (file-attributes *config-file*)))
      (my/async-babel-tangle *config-file*)))

  (defun my/async-babel-tangle (org-file)
    "Tangles the org file ORG-FILE asynchronously."
    (let ((init-tangle-start-time (current-time))
          (file (buffer-file-name))
          (async-quiet-switch "-q"))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file, org-file))
       (unless *show-async-tangle-results*
         `(lambda (result)
            (if result
                (message "SUCCESS: %s successfully tangled (%.2fs)."
                         ,org-file
                         (float-time (time-subtract (current-time)
                                                    ',init-tangle-start-time)))
              (message "ERROR: %s as tangle failed." ,org-file)))))))
#+end_src

* Org

** Org

#+begin_src emacs-lisp :tangle yes
    (use-package org
      :ensure org-plus-contrib
      :delight "0 "
      :bind ("C-c i" . org-insert-structure-template)
      :preface
      (defun my/org-compare-times (clocked estimated)
        "Gets the ratio between the actual time and the estimated time."
        (if (and (> (length clocked) 0) estimated)
            (format "%.2f"
                    (/ (* 1.0 (org-duration-to-minutes clocked))
                       (org-duration-to-minutes estimated)))
          ""))

      (defun my/org-archive-done-tasks ()
        "Archive finished or cancelled tasks."
        (interactive)
        (org-map-entries
         (lambda ()
           (org-archive-subtree)
           (setq org-map-continue-from (outline-previous-heading)))
         "TODO=\"DONE\"|TODO=\"CANCELLED\"" (if (org-before-first-heading-p) 'file 'tree)))

      (defun my/org-jump ()
        "Jump to a specific task."
        (interactive)
        (let ((current-prefix-arg '(4)))
          (call-interactively 'org-refile)))

    (defun my/org-use-speed-commands-for-headings-and-lists ()
      "Activate speed commands on list items too."
      (or (and (looking-at org-outline-regexp) (looking-back "^\**" nil))
          (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*" nil)))))

    (defmacro ignore-args (fnc)
      "Return function that ignores its arguments and invokes FNC."
      `(lambda (&rest _rest)
         (funcall ,fnc)))
      :hook ((after-save . my/config-tangle)
             (auto-save . org-save-all-org-buffers)
             (org-mode . org-indent-mode))
      :custom
      (org-archive-location "~/.personal/archives/%s::")
      (org-blank-before-new-entry '((heading . t) (plain-list-item . t)))
      (org-cycle-include-plain-lists 'integrate)
      (org-ditaa-jar-path "~/.local/lib/ditaa0_11.jar")
      (org-expiry-inactive-timestamps t)
      (org-export-backends '(ascii beamer html icalendar latex man md org texinfo))
    (org-log-done 'time)
    (org-log-into-drawer "LOGBOOK")
      (org-startup-indented t)
      (org-modules '(org-crypt
                     org-habit
                     org-mouse
                     org-protocol
                     org-tempo))
      (org-refile-allow-creating-parent-nodes 'confirm)
      (org-refile-use-cache nil)
      (org-refile-use-outline-path nil)
      (org-refile-use-targets '((org-agenda-files . (:maxlevel . 6))))
      (org-startup-folded nil)
      (org-startup-with-inline-images t)
      (org-tag-alist '(("@coding" . ?c)
                     ("@computer" . ?l)
                     ("@errands" . ?e)
                     ("@home" . ?h)
                     ("@phone" . ?p)
                     ("@reading" . ?r)
                     ("@work" . ?b)
                     ("@writing" . ?w)
                     ("crypt" . ?C)
                     ("fuzzy" . ?0)
                     ("highenergy" . ?1)))
    (org-tags-exclude-from-inheritance '("crypt" "project"))
    (org-todo-keywords '((sequence "TODO(t)"
                                   "STARTED(s)"
                                   "WAITING(w@/!)"
                                   "SOMEDAY(.)" "|" "DONE(x!)" "CANCELLED(c@)")
                         (sequence "TOBUY"
                                   "TOSHRINK"
                                   "TOCUT"
                                   "TOSEW" "|" "DONE(x)")))
    (org-use-effective-time t)
    (org-use-speed-commands 'my/org-use-speed-commands-for-headings-and-lists)
    (org-yank-adjusted-subtrees t)
    :config
  (add-to-list 'org-global-properties '("Effort_ALL" . "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))
  (add-to-list 'org-speed-commands-user '("!" my/org-clock-in-and-track))
  (add-to-list 'org-speed-commands-user '("$" call-interactively 'org-archive-subtree))
  (add-to-list 'org-speed-commands-user '("d" my/org-move-line-to-destination))
  (add-to-list 'org-speed-commands-user '("i" call-interactively 'org-clock-in))
  (add-to-list 'org-speed-commands-user '("o" call-interactively 'org-clock-out))
  (add-to-list 'org-speed-commands-user '("s" call-interactively 'org-schedule))
  (add-to-list 'org-speed-commands-user '("x" org-todo "DONE"))
  (add-to-list 'org-speed-commands-user '("y" org-todo-yesterday "DONE"))
  (advice-add 'org-deadline :after (ignore-args #'org-save-all-org-buffers))
  (advice-add 'org-schedule :after (ignore-args #'org-save-all-org-buffers))
  (advice-add 'org-store-log-note :after (ignore-args #'org-save-all-org-buffers))
  (advice-add 'org-todo :after (ignore-args #'org-save-all-org-buffers))
  (org-clock-persistence-insinuate)
  (org-load-modules-maybe t))

#+end_src

** Org Bullets

#+begin_src emacs-lisp :tangle yes
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("●" "►" "▸")))
#+end_src

** Org-toc

#+begin_src emacs-lisp :tangle yes
  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-enable))
#+end_src

** Org Indent

#+begin_src emacs-lisp :tangle yes
  (use-package org-indent :ensure nil :after org :diminish)
#+end_src

** Agenda

#+begin_src emacs-lisp :tangle yes
(use-package org-agenda
  :ensure nil
  :bind (:map org-agenda-mode-map
              ("X" . my/org-agenda-mark-done-and-add-followup)
              ("x" . my/org-agenda-done))
  :preface
  (defun my/org-agenda-done (&optional arg)
    "Mark current TODO as done.
This changes the line at point, all other lines in the agenda referring to the same tree node,
and the headline of the tree node in the Org-mode file."
    (interactive "P")
    (org-agenda-todo "DONE"))

  (defun my/org-agenda-mark-done-and-add-followup ()
    "Mark the current TODO as done and add another task after it.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
    (interactive)
    (org-agenda-todo "DONE")
    (org-agenda-switch-to)
    (org-capture 0 "t"))
  :custom
  (org-agenda-dim-blocked-tasks t)
  (org-agenda-files '("~/.personal/agenda/"))
  (org-agenda-inhibit-startup t)
  (org-agenda-show-log t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-deadline-prewarning-if-schedules 'pre-scheduled)
  (org-agenda-skip-schedules-if-done t)
  (org-agenda-span 2)
  (org-agenda-start-on-weekday 6)
  (org-agenda-sticky nil)
  (org-agenda-tags-column -100)
  (org-agenda-time-grind '((daily today require-timed)))
  (org-agenda-use-tag-inheritance t)
  (org-columns-default-format "%14SCHEDULED %Effort{:} %1PRIORITY %TODO %50ITEM %TAGS")
  (org-default-notes-file "~/.personal/agenda/organizer.org")
  (org-directory "~/.personal/")
  (org-enforce-todo-dependencies t)
  (org-habit-completed-glyph ?✓)
  (org-habit-graph-column 80)
  (org-habit-show-habits-only-for-today nil)
  (org-habit-today-glyph ?‖)
  (org-track-ordered-property-with-tag t))
#+end_src

** Capture

#+begin_src emacs-lisp :tangle yes
(use-package org-capture
  :ensure nil
  :after org
  :preface
  (defvar my/org-basic-task-template "* TODO %^{Task}
:PROPERTIES:
:Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}
:END:
Captured %<%Y-%m-%d %H:%M>" "Template for basic task.")

  (defvar my/org-contacts-template "* %(org-contacts-template-name)
:PROPERTIES:
:ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
:BIRTHDAY: %^{yyyy-mm-dd}
:EMAIL: %(org-contacts-template-email)
:NOTE: %^{NOTE}
:END:" "Template for org-contacts.")

  (defvar my/org-ledger-card-template "%(org-read-date) %^{Payee}
Expenses:%^{Account} €%^{Amount}
Liabilities:CreditCards:%^{Card}" "Template for credit card transaction with ledger.")

  (defvar my/org-ledger-cash-template "%(org-read-date) * %^{Payee}
Expenses:%^{Account} €%^{Amount}
Assets:Cash:Wallet" "Template for cash transaction with ledger.")

  :custom
  (org-capture-templates
   `(("B" "Book" checkitem (file+headline "~/.personal/other/books.org" "Books")
      "- [ ] %^{Book}"
      :immediate-finish t)

     ("L" "Learning" checkitem (file+headline "~/.personal/other/learning.org" "Things")
      "- [ ] %^{Thing}"
      :immediate-finish t)

     ("M" "Movie" checkitem (file+headline "~/.personal/other/movies.org" "Movies")
      "- [ ] %^{Movie}"
      :immediate-finish t)

     ("P" "Purchase" checkitem (file+headline "~/.personal/other/purchases.org" "Purchases")
      "- [ ] %^{Item}"
      :immediate-finish t)

     ("c" "Contact" entry (file+headline "~/.personal/agenda/contacts.org" "Friends"),
      my/org-contacts-template
      :empty-lines 1)

     ("l" "Ledger")

     ("lb" "Bank" plain (file ,(format "~/.personal/ledger/ledger-%s.dat" (format-time-string "%Y"))),
      my/org-ledger-card-template
      :empty-lines 1
      :immediate-finish t)

     ("lc" "Cash" plain (file ,(format "~/.personal/ledger/ledger-%s.dat" (format-time-string "%Y"))),
      my/org-ledger-cash-template
      :empty-lines 1
      :immediate-finish t)

     ("p" "People" entry (file+headline "~/.personal/agenda/people.org" "Tasks"),
      my/org-basic-task-template
      :empty-lines 1)

     ("t" "Task" entry (file+headline "~/.personal/agenda/organizer.org" "Tasks"),
      my/org-basic-task-template
      :empty-lines 1))))
#+end_src

** Clock

#+begin_src emacs-lisp :tangle yes
(use-package org-clock
  :ensure nil
  :after org
  :preface
  (defun my/org-mode-ask-effort ()
    "Ask for an effort estimate when clocking in."
    (unless (org-entry-get (point) "Effort")
      (let ((effort
             (completing-read
              "Effort: "
              (org-entry-get-multivalued-property (point) "Effort"))))
        (unless (equal effort "")
          (org-set-property "Effort" effort)))))
  :hook (org-clock-in-prepare-hook . my/org-mode-ask-effort)
  :custom
  (org-clock-clocktable-default-properties
   '(:block day :maxlevel 2 :scope agenda :link t :compact t :formula %
            :step day :fileskip0 t :stepskip0 t :narrow 80
            :properties ("Effort" "CLOCKSUM" "CLOCKSUM_T" "TODO")))
  (org-clock-continuously nil)
  (org-clock-in-switch-to-state "STARTED")
  (org-clock-out-remove-zero-time-clocks t)
  (org-clock-persist t)
  (org-clock-persist-file (expand-file-name (format "%s/emacs/org-clock-save.el" xdg-cache)))
  (org-clock-persist-query-resume-nil)
  (org-clock-report-include-clocking-task t)
  (org-show-notification-handler (lambda (msg) (alert msg))))

(use-package org-pomodoro
  :defer 0.5
  :custom
  (alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil))))
  (org-pomodoro-audio-player "/usr/bin/mpv")
  (org-pomodoro-finished-sound "~/Audio/pomodoro_finished.mp3")
  (org-pomodoro-format " %s")
  (org-pomodoro-killed-sound "~/Audio/pomodoro_killed.wav")
  (org-pomodoro-long-break-sound "~/Audio/pomodoro_long.wav")
  (org-pomodoro-overtime-sound "~/Audio/pomodoro_overtime.wav")
  (org-pomodoro-short-break-sound "~/Audio/pomodoro_short.wav")
  (org-pomodoro-start-sound "~/Audio/pomodoro_start.wav")
  (org-pomodoro-start-sound-p t))
#+end_src

** Contacts

#+begin_src emacs-lisp :tangle yes
(use-package org-contacts
  :ensure nil
  :after org
  :custom (org-contacts-files '("~/.personal/agenda/contacts.org")))
#+end_src

** Customization

#+begin_src emacs-lisp :tangle yes
(use-package org-faces
  :ensure nil
  :after org
  :custom
  (org-todo-keyword-faces
   '(("DONE" . (:foreground "cyan" :weight bold))
     ("SOMEDAY" . (:foreground "gray" :weight bold))
     ("TODO" . (:foreground "green" :weight bold))
     ("WAITING" . (:foreground "red" :weight bold)))))
#+end_src

** Encryption/Decryption

#+begin_src emacs-lisp :tangle yes
(use-package org-crypt
  :ensure nil
  :after org
  :init (org-crypt-use-before-save-magic)
  :custom (org-crypt-key ;Enter key here
))
#+end_src

** Journal

#+begin_src emacs-lisp :tangle yes
(use-package org-journal
  :after org
  :bind (("C-c T" . org-journal-new-entry)
         ("C-c Y" . journal-file-yesterday))
  :preface
  (defun get-journal-file-yesterday ()
    "Gets filename for yesterday's journal entry"
    (let* ((yesterday (time-subtract (current-time) (days-to-time 1)))
           (daily-name (format-time-string "%Y%m%d" yesterday)))
      (expand-file-name (concat org-journal-dir daily-name))))

  (defun journal-file-yesterday ()
    "Created and loads a file based on yesterday's date."
    (interactive)
    (find-file (get-journal-file-yesterday)))
  :custom
  (org-journal-date-format "%e %b %Y (%A)")
  (org-journal-dir (format "~/.personal/journal/" (format-time-string "%Y")))
  (org-journal-enable-encryption t)
  (org-journal-file-format "%Y%m%d")
  (org-journal-time-format ""))
#+end_src

** Languages

#+begin_src emacs-lisp :tangle yes
(use-package ob-C :ensure nil :after org)
(use-package ob-css :ensure nil :after org)
(use-package ob-ditaa :ensure nil :after org)
(use-package ob-dot :ensure nil :after org)
(use-package ob-emacs-lisp :ensure nil :after org)
(use-package ob-gnuplot :ensure nil :after org)
(use-package ob-java :ensure nil :after org)
(use-package ob-js :ensure nil :after org)

(use-package ob-latex
  :ensure nil
  :after org
  :custom (org-latex-compiler "xelatex"))

(use-package ob-ledger :ensure nil :after org)
(use-package ob-makefile :ensure nil :after org)
(use-package ob-org :ensure nil :after org)

(use-package ob-plantuml
  :ensure nil
  :after org
  :custom (org-plantuml-jar-path (expand-file-name (format "%s/plantuml.jar" xdg-lib))))

(use-package ob-python :ensure nil :after org)
(use-package ob-ruby :ensure nil :after org)
(use-package ob-shell :ensure nil :after org)
(use-package ob-sql :ensure nil :after org)
#+end_src


* Linters

#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
      :diminish
      :init (global-flycheck-mode))

    (use-package flycheck-pos-tip
      :init (flycheck-pos-tip-mode))

    (use-package flycheck-color-mode-line
      :hook (flycheck-mode . flycheck-color-mode-line-mode))

  (use-package flycheck-clang-tidy
    :after flycheck
    :hook
    (flycheck-mode . flycheck-clang-tidy-setup)
    :custom
    (flycheck-clang-tidy-executable (executable-find "clang-tidy")))
#+end_src

* Programming

** General

*** LSP

#+begin_src emacs-lisp :tangle yes
      (use-package lsp-mode
        :commands lsp
        :init (setq lsp-keymap-prefix "s-;")
        :hook (((c-mode c++-mode java-mode json-mode python-mode tex-mode typescript-mode xlm-mode) . lsp)
               (lsp-mode . lsp-enable-which-key-integration))
        :custom
        (lsp-enable-semantic-highlighting 'overlay)
        (lsp-clients-typescript-server-args '("--stdio" "--tsserver-log-file" "/dev/stderr"))
      (lsp-clients-clangd-args '("--clang-tidy" "--cross-file-rename"
                                 "--header-insertion=iwyu" "--suggest-missing-includes"
                                 "--header-insertion-decorators" "--folding-ranges"))
      (lsp-enable-folding t)
        (lsp-enable-links t)
        (lsp-enable-snippet t)
        (lsp-prefer-capf t)
        (lsp-prefer-flymake nil)
        (lsp-session-file (expand-file-name (format "%s/emacs/lsp-session-v1" xdg-data)))
        (lsp-restart 'auto-restart))
#+end_src

*** LSP Dart

#+begin_src emacs-lisp :tangle yes
  (use-package lsp-dart
    :hook (dart-mode . lsp))
#+end_src

*** LSP misc

#+begin_src emacs-lisp :tangle yes
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :config (lsp-treemacs-sync-mode 1))
#+end_src

*** DAP

#+begin_src emacs-lisp :tangle yes
  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-auto-configure-mode t))
#+end_src

*** Meson

#+begin_src emacs-lisp :tangle yes
  (use-package meson-mode
    :hook (meson-mode . company-mode))
#+end_src

*** Editor configuration

#+begin_src emacs-lisp :tangle yes
  (use-package editorconfig
    :config (editorconfig-mode 1))
#+end_src

** Projects

*** Projectile

#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :preface
    (defun my/projectile-compilation-buffers (&optional project)
      "Get a list of a project's compilation buffers.
  If PROJECT is not specified, the command acts on the current project."
      (let* ((project-root (or project (projectile-project-root)))
             (buffer-list (mapcar #'process-buffer compilation-in-progress))
             (all-buffers (cl-remove-if-not
                           (lambda (buffer)
                             (projectile-project-buffer-p buffer project-root))
                           buffer-list)))
        (if projectile-buffers-filter-function
            (funcall projectile-buffers-filter-function all-buffers)
          all-buffers)))
    :custom
    (projectile-cache-file (expand-file-name (format "%s/emacs/projectile.cache" xdg-cache)))
    (projectile-completion-system 'ivy)
    (projectile-enable-caching t)
    (projectile-keymap-prefix (kbd "C-c C-p"))
    (when (file-directory-p "~/.local/share/git")
      (projectile-project-search-path '("~/.local/share/git")))
    (projectile-known-projects-file (expand-file-name (format "%s/emacs/projectile-bookmarks.eld" xdg-cache)))
    (projectile-mode-line '(:eval (projectile-project-name)))
    (projectile-switch-project-action #'projectile-dired)
    :config (projectile-global-mode))
#+end_src

*** Treemacs

#+begin_src emacs-lisp :tangle yes
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-width                         35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)

  (use-package treemacs-persp
    :after treemacs persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))
#+end_src

** Languages

*** C/C++

#+begin_src emacs-lisp :tangle yes
    ;(use-package ccls
      ;:after projectile
      ;:ensure-system-package ccls
      ;:custom
      ;;(ccls-args "--init=cclsinit.json")
;      (ccls-args nil)
 ;     (ccls-executable (executable-find "ccls"))
      ;;(projectile-project-root-files-top-down-recurring
      ;;(append '("compile_commands.json" ".ccls")
      ;;projectile-project-root-files-top-down-recurring))
  ;    :config (add-to-list 'projectile-globally-ignored-directories ".ccls-cache")
   ;   (setq ccls-sem-highlight-method 'overlay)
    ;  (setq ccls-initialization-options '(:compilationDatabaseDirectory "build-debug")))

      (require 'dap-lldb)
#+end_src

*** Emacs Lisp

#+begin_src emacs-lisp :tangle yes
  (use-package elisp-mode
    :ensure nil
    :delight "ξ ")
#+end_src

*** Eldoc

#+begin_src emacs-lisp :tangle yes
  (use-package eldoc
    :diminish
    :hook (emacs-lisp-mode . eldoc-mode))
#+end_src

*** Python

**** Electric operator

#+begin_src emacs-lisp :tangle yes
(use-package electric-operator
  :delight
  :hook (python-mode . electric-operator-mode))
#+end_src

*** GLSL

#+begin_src emacs-lisp :tangle yes
(use-package glsl-mode)
#+end_src

*** CSS-LESS-SCSS

Install =.vscode-css-languageserver.= through =.npm install --global vscode-css-languageserver-bin.=

#+begin_src emacs-lisp :tangle yes
(use-package css-mode
  :custom (css-indent-offset 2))

(use-package less-css-mode
  :mode "\\.less\\'")

(use-package scss-mode
  :mode "\\.scss\\'")
#+end_src

*** CSV

#+begin_src emacs-lisp :tangle yes
(use-package csv-mode)
#+end_src

*** Dart

#+begin_src emacs-lisp :tangle yes
    (use-package dart-mode
      :defer 2
      :custom
      (dart-format-on-save t)
      (dart-sdk-path "/opt/flutter/bin/")
      :config
      (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
      (add-to-list 'projectile-project-root-files-bottom-up "BUILD"))

    (use-package flutter
      :after dart-mode
      :bind (:map dart-mode-map
             ("C-c C-c" . flutter-run-or-hot-reload))
      :custom (flutter-sdk-path "/opt/flutter/bin/"))

    (use-package flutter-l10n-flycheck
      :after flutter
      :config (flutter-l10n-flycheck-setup))

  (use-package hover :ensure t)
#+end_src

*** Docker

#+begin_src emacs-lisp :tangle yes
(use-package dockerfile-mode
  :delight "δ "
  :mode "Dockerfile\\'")
#+end_src

*** HTML

Install =.vscode-html-languageserver.= through =.npm install --global vscode-html-languageserver-bin.=

#+begin_src emacs-lisp :tangle yes
(use-package emmet-mode
  :delight
  :hook (css-mode sgml-mode web-mode))
#+end_src

*** INI

#+begin_src emacs-lisp :tangle yes
    (use-package ini-mode
      :defer 0.4
      :mode ("\\.ini\\'"))
#+end_src

*** Java

In order to have a fast and stable environment, I recommend using lsp-java as LSP client and Eclipse JDT Language Server as LSP server.

#+begin_src emacs-lisp :tangle yes
(use-package lsp-java
  ;;:after lsp
  :config (add-hook 'java-mode-hook 'lsp)
  :custom (lsp-java-server-install-dir
           (expand-file-name (format "%s/eclipse.jdt.ls/server" xdg-lib))))
#+end_src

*** Gradle

#+begin_src emacs-lisp :tangle yes
(use-package gradle-mode
  :mode ("\\.java\\'" "\\.gradle\\'")
  :bind (:map gradle-mode-map
         ("C-c C-c" . gradle-build)
         ("C-c C-t" . gradle-test))
  :preface
  (defun my/switch-to-compilation-window ()
    "Switches to the *compilation* buffer after compilation."
    (other-window 1))
  :config
  (advice-add 'gradle-build :after #'my/switch-to-compilation-window)
  (advice-add 'gradle-test :after #'my/switch-to-compilation-window))
#+end_src

*** JavaScript

npm install --save-dev --save-exact prettier

#+begin_src emacs-lisp :tangle yes
(use-package prettier-js
  :delight
  :custom (prettier-js-args '("--print-width" "100"
                              "--single-quote" "true"
                              "--trailing-comma" "all")))

(use-package js2-mode
  :hook ((js2-mode . js2-imenu-extras-mode)
         (js2-mode . prettier-js-mode))
  :mode "\\.js\\'"
  :custom (js-indent-level 2))

(use-package js2-refactor
  :bind (:map js2-mode-map
         ("C-k" . ks2r-kill)
         ("M-." . nil))
  :hook ((js2-mode . js2-refactor-mode)
         (js2-mode . (lambda ()
                      (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))
  :config (js2r-add-keybindings-with-prefix "C-c C-r"))

(use-package xref-js2 :defer 5)
#+end_src

*** JSON

#+begin_src emacs-lisp :tangle yes
(use-package json-mode
  :delight "J "
  :mode "\\.json\\'"
  :hook (before-save . my/json-mode-before-save-hook)
  :preface
  (defun my/json-mode-before-save-hook ()
    (when (eq major-mode 'json-mode)
      (json-pretty-print-buffer)))

  (defun my/json-array-of-numbers-on-one-line (encode array)
    "Prints the arrays of numbers in one line."
    (let* ((json-encoding-pretty-print
            (and json-encoding-pretty-print
                 (not (loop for x across array always (numberp x)))))
           (json-encoding-seperator (if json-encoding-pretty-print "," ", ")))
      (funcall encode array)))
  :config (advice-add 'json-encode-array :around #'my/json-array-of-numbers-on-one-line))
#+end_src

*** LaTex

#+begin_src emacs-lisp :tangle yes
  (use-package tex
    :ensure auctex
    :bind (:map TeX-mode-map
                ("C-c C-o" . TeX-recenter-output-buffer)
                ("C-c C-l" . TeX-next-error)
                ("M-[" . outline-previous-heading)
                ("M-]" . outline-next-heading))
    :hook (LaTeX-mode . reftex-mode)
    :preface
    (defun my/switch-to-help-window (&optional ARG REPARSE)
      "Switches to the *TeX Help* buffer after compilation."
      (other-window 1))
    :custom
    (TeX-auto-save t)
    (TeX-byte-compile t)
    (TeX-clean-confirm nil)
    (TeX-master 'dwim)
    (TeX-parse-self t)
    (TeX-PDF-mode t)
    (TeX-source-correlate-mode t)
    (TeX-view-program-selection '((output-pdf "PDF Tools")))
    :config
    (advice-add 'Tex-next-error :after #'my/switch-to-help-window)
    (advice-add 'Tex-recenter-output-buffer :after #'my/switch-to-help-window)
    (add-hook 'Tex-after-compilation-finished-functions 'TeX-revert-document-buffer))

  (use-package lsp-latex
    :if (executable-find "texlab")
    :hook (LaTeX-mode . (lambda ()
                          (require 'lsp-latex)
                          (lsp)))
    :custom
    (lsp-latex-build-on-save t))

  (use-package bibtex
    :after auctex
    :hook (bibtex-mode . my/bibtext-fill-column)
    :preface
    (defun my/bibtex-fill-column ()
      "Ensures that each entry does not exceed 120 characters."
      (setq fill-column 120)))

  (use-package company-auctex
    :after (acutex company)
    :config (company-auctex-init))

  (use-package company-math :after (auctex company))

  (setq-default TeX-engine 'xetex)
#+end_src

**** reftex

#+begin_src emacs-lisp :tangle yes
(use-package reftex
  :after auctex
  :custom
  (reftex-plug-into-AUCTeX t)
  (reftex-save-parse-info t)
  (reftex-use-multiple-selection-buffers t))
#+end_src

*** Lua

#+begin_src emacs-lisp :tangle yes
(use-package lua-mode
  :delight "Λ "
  :mode "\\.lua\\'"
  :interpreter ("lua" . lua-mode))
#+end_src

*** Markdown

#+begin_src emacs-lisp :tangle yes
(use-package markdown-mode
  :ensure-system-package (pandoc . "sudo pacman -S pandoc")
  :delight "μ "
  :mode ("\\.markdown\\'" "\\.md\\'")
  :custom (markdown-command "/usr/bin/pandoc"))

(use-package markdown-preview-mode
  :after markdown-mode
  :custom
  (markdown-preview-javascript
   (list (concat "https://githib.com/highlightjs/highlight.js/"
                 "9.15.6/highlight.min.js")
         "<script>
          $(document).on('mdContentChange', function() {
            $('pre code').each(function(i, block) {
              hljs.highlightBlock(block);
            });
          });
          </script>"))
  (markdown-preview-stylesheets
   (list (concat "https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/"
                 "3.0.1/github-markdown.min.css")
         (concat "https://github.com/highlightjs/highlight.js/"
                 "9.15.6/styles/github.min.css")
         "<style>
         .markdown-body {
           box-sizing: border-box;
           min-width: 200px;
           max-width: 980px;
           margin: 0 auto;
           padding: 45px:
         }

         @media (max-width: 767px) { .markdown-body { padding: 15px; } }
         </style>"
)))
#+end_src

*** PHP

Install through composer =.composer require felixfbecker/language-server.=

#+begin_src emacs-lisp :tangle yes
(defun my/php-setup ()
  (web-mode)
  (make-local-variable 'web-mode-code-indent-offset)
  (make-local-variable 'web-mode-markup-indent-offset)
  (make-locak-variable 'web-mode-css-indent-offset))

(use-package ac-php
  :after (company php-mode)
  :hook (php-mode . ac-php-mode)
  :custom (ac-sources '(ac-source-php))
  :config
  (ac-php-core-eldoc-setup)
  (auto-complete-mode t))
#+end_src

*** PlantUML

It is often useful to be able to make diagrams for various large projects. For the creation of these diagrams, PlantUML remains the best.

#+begin_src emacs-lisp :tangle yes
(use-package plantuml-mode
  :mode ("\\.plantuml\\'" "\\.puml\\'")
  :custom (plantuml-jar-path (expand-file-name (format "%s/plantuml.jar" xdg-lib))))
#+end_src

*** Python

In order to have a fast and stable environment, I recommend to use lsp-python-ms as LSP client and
mspyls as LSP server as mspyls is faster than pyls.
I use black to reformat my Python buffer. Before use it, don’t forget to install python-black in your system.

To sort my Python imports, py-isort does a good job. Also, don’t forget to install python-isort in your system.

#+begin_src emacs-lisp :tangle yes
  (use-package blacken
    :delight
    :hook (python-mode . blacken-mode)
    :custom (blacken-line-length 100))

  (use-package python
    :delight "π "
    :bind (:map python-mode-map
                ("M-[" . python-nav-backward-block)
                ("M-]" . python-nav-forward-block))
    :preface
    (defun python-remove-unused-imports()
      "Removes unused imports and unused variables with autoflake."
      (interactive)
      (if (executable-find "autoflake")
          (progn
            (shell-command (format "autoflake --remove-all-unused-imports -i %s"
                                   (shell-quote-argument (buffer-file-name))))
            (revert-buffer t t t))
        (warn "python-mode: Cannot find autoflake executable."))))

  (use-package pyvenv
    :after python
    :hook (python-mode . pyvenv-mode)
    :custom
    (pyvenv-default-vertual-env-name "env")
    (pyvenv-mode-line-indication '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] "))))
#+end_src

*** Shell-script

#+begin_src emacs-lisp :tangle yes
(use-package sh-script
  :ensure nil
  :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src

*** SQL

#+begin_src emacs-lisp :tangle yes
(use-package sql-indent
  :after (:any sql sql-interactive-mode)
  :delight sql-mode "Σ ")
#+end_src

*** Typescript

#+begin_src emacs-lisp :tangle yes
(use-package typescript-mode
  :mode ("\\.ts\\'" "\\.tsx\\'")
  :hook (typescript-mode . prettier-js-mode)
  :custom
  (add-hook 'typescript-mode-hook #'(lambda ()
                                      (enable-minor mode
                                                    '("\\.tsx?\\'" . prettier-js-mode)))))
#+end_src

*** XML

#+begin_src emacs-lisp :tangle yes
(use-package xml-mode
  :ensure nil
  :mode ("\\.wsdl\\'" "\\.xsd\\'"))
#+end_src

*** YAML

#+begin_src emacs-lisp :tangle yes
(use-package yaml-mode
  :delight "ψ "
  :mode "\\.yml\\'"
  :interpreter ("yml" . yml-mode))
#+end_src

*** Yarn

#+begin_src emacs-lisp :tangle yes
(use-package yarn-mode
  :mode "yarn\\.lock\\'")
#+end_src

** Helpful functions

*** Rainbow Delimiters

#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Aggressive Indent

#+begin_src emacs-lisp :tangle yes
  (use-package aggressive-indent
    :hook ((css-mode . aggressive-indent-mode)
           (emacs-lisp-mode . aggressive-indent-mode)
           (js-mode . aggressive-indent-mode)
           (lisp-mode . aggressive-indent-mode))
    :custom (aggressive-indent-comments-too))
#+end_src

*** web-mode

#+begin_src emacs-lisp :tangle yes
  (use-package web-mode
    :delight "☸ "
    :hook ((css-mode web-mode) . rainbow-mode)
    :mode (("\\.blade\\.php\\'" . web-mode)
           ("\\.html?'" . web-mode)
           ("\\.jsx\\'" . web-mode)
           ("\\.php$" . my/php-setup))
    :preface
    (defun enable-minor-mode (my-pair)
      "Enable minor mode if filename match the regexp."
      (if (buffer-file-name)
          (if (string-match (car my-pair) buffer-file-name)
              (funcall (cdr my-pair)))))
    :custom
    (web-mode-attr-indent-offset 2)
    (web-mode-block-padding 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-comment-style 2)
    (web-mode-enable-current-element-highlight t)
    (web-mode-markup-indent-offset 2))

  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode '("\\.js?\\'" . prettier-js-mode))))

  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode '("\\.jsx?\\'" . prettier-js-mode))))

  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode '("\\.ts?\\'" . prettier-js-mode))))

  (add-to-list 'auto-mode-alist '("\\.php$" . my/php-setup))

  (setq web-mode-code-indent-offset 2
        web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-enable-html-entities-fontification nil
        web-mode-enable-block-face nil
        web-mode-enable-comment-annotation nil
        web-mode-enable-comment-interpolation nil
        web-mode-enable-control-block-indentation nil
        web-mode-enable-css-colorization nil
        web-mode-enable-current-column-highlight nil
        web-mode-enable-current-element-highlight nil
        web-mode-enable-element-content-fontification nil
        web-mode-enable-heredoc-fontification nil
        web-mode-enable-inlays nil
        web-mode-enable-optional-tags nil
        web-mode-enable-part-face nil
        web-mode-enable-sexp-function nil
        web-mode-enable-sql-detection nil
        web-mode-enable-string-interpolation nil
        web-mode-enable-whitespace-fontification nil
        web-mode-enable-auto-expanding nil
        web-mode-enable-auto-indentation nil
        web-mode-enable-auto-closing nil
        web-mode-enable-auto-opening nil
        web-mode-enable-auto-pairing nil
        web-mode-enable-auto-quoting nil)
#+end_src

*** Rainbow-mode

#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-mode
    :diminish
    :hook (prog-mode))
#+end_src

*** Auto-revert
#+begin_src emacs-lisp :tangle yes
(use-package autorevert
  :ensure nil
  :delight auto-revert-mode
  :bind ("C-x R" . revert-buffer)
  :custom (auto-revert-verbose nil)
  :config (global-auto-revert-mode 1))
#+end_src

*** Ledger
#+begin_src emacs-lisp :tangle yes
(use-package ledger-mode
  :ensure-system-package (ledger . "sudo pacman -S ledger")
  :mode ("\\.dat\\'"
         "\\.ledger\\'")
  :bind (:map ledger-mode-map
              ("C-x C-s" . my/ledger-save))
  :hook (ledger-mode . ledger-flymake-enable)
  :preface
  (defun my/ledger-save ()
    "Automatically clean the ledger buffer at each save."
    (interactive)
    (ledger-mode-clean-buffer)
    (save-buffer))
  :custom
  (ledger-clear-whole-transactions t)
  (ledger-reconcile-default-commodity "EUR")
  (ledger-reports
   '(("account statement" "%(binary) reg --real [[ledger-mode-flags]] -f %(ledger-file) ^%(account)")
     ("balance sheet" "%(binary) --real [[ledger-mode-flags]] -f %(ledger-file) bal ^assets ^liabilities ^equity")
     ("budget" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:budget")
     ("budget goals" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget goals'")
     ("budget obligations" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget obligations'")
     ("budget debts" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget debts'")
     ("cleared" "%(binary) cleared [[ledger-mode-flags]] -f %(ledger-file)")
     ("equity" "%(binary) --real [[ledger-mode-flags]] -f %(ledger-file) equity")
     ("income statement" "%(binary) --invert --real -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^income ^expenses -p \"this month\""))
   (ledger-report-use-header-line nil)))

(use-package flycheck-ledger :after ledger-mode)
#+end_src

*** Network

#+begin_src emacs-lisp :tangle yes
(use-package ipcalc :defer 4)

(defun ipinfo (ip)
  "Returns the details of an IP address from a certain IP, using ipinfo.io"
  (interactive "sEnter IP to query (blank for own IP): ")
  (request
    (concat "https://ipinfo.io/" ip)
    :headers '(("User-Agent" . "Emacs ipinfo.io Client")
               ("Accept" . "application/json")
               ("Content-Type" . "application/json;charset=utf-8"))
    :parser 'json-read
    :success (cl-function
              (lambda (&key data &allow-other-keys)
                (message
                 (mapconcat
                  (lambda (e)
                    (format "%10s: %s" (capitalize (symbol-name (car e))) (cdr e)))
                  data "\n"))))
    :error (cl-function (lambda (&rest args &key error-thrown &allow-other-keys)
                          (message "Cant' receive ipinfo. Error %S " error-thrown)))))
#+end_src

*** Parentheses

#+begin_src emacs-lisp :tangle yes
(use-package faces
  :ensure nil
  :custom (show-paren-delay 0)
  :config
  (set-face-background 'show-paren-match "#262b36")
  (set-face-bold 'show-paren-match t)
  (set-face-foreground 'show-paren-match "#ffffff"))
#+end_src

*** Paste

#+begin_src emacs-lisp :tangle yes
(use-package webpaste :defer 1)
(use-package imgbb :defer 2)
#+end_src

*** PDF

#+begin_src emacs-lisp :tangle yes
    (use-package pdf-tools
      :defer 1
      :magic ("%PDF" . pdf-view-mode)
      :init (pdf-tools-install :no-query))

  (use-package pdf-view
    :ensure nil
    :after pdf-tools
    :bind (:map pdf-view-mode-map
                ("C-s" . isearch-forward)
                ("d" . pdf-annot-delete)
                ("h" . pdf-annot-add-highlight-markup-annotation)
                ("t" . pdf-annot-add-text-annotation))
    :custom
    (pdf-view-display-size 'fit-page)
    (pdf-view-resize-factor 1.1)
    (pdf-view-use-unicode-lighter nil))
#+end_src

*** Point and region

#+begin_src emacs-lisp :tangle yes
(use-package expand-region
  :bind (("C-+" . er/contract-region)
         ("C-=" . er/expand-region)))

(defadvice kill-region (before slick-cut activate compile)
  "When called interactively with no active region, kill a single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))
#+end_src

*** Requests

#+begin_src emacs-lisp :tangle yes
(use-package request
  :ensure nil
  :custom
  (request-storage-directory (expand-file-name (format "%s/emacs/request/" xdg-data))))

(use-package url-cookie
  :ensure nil
  :custom
  (url-cookie-file (expand-file-name (format "%s/emacs/url/cookies/" xdg-data))))
#+end_src

*** Reveal.js

#+begin_src emacs-lisp :tangle yes
(use-package org-re-reveal
  :after org
  :custom
  (org-reveal-mathjax t)
  (org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/"))
#+end_src

*** Version Control

#+begin_src emacs-lisp :tangle yes
    (use-package git-commit
      :after magit
      :hook (git-commit-mode . my/git-commit-auto-fill-everywhere)
      :custom (git-commit-summary-max-length 50)
      :preface
      (defun my/git-commit-auto-fill-everywhere ()
        "Ensures that the commit body does not exceed 72 characters."
        (setq fill-column 72)
        (setq-local comment-auto-fill-only-comments nil)))

    (use-package magit :defer 0.3
      :custom
      (magit-display-buffer-funtion #'magit-display-buffer-same-window-except-diff-v1))

    (use-package smerge-mode
      :after hydra
      :hook (magit-diff-visit-file . (lambda ()
                                       (when smerge-mode
                                         (hydra-merge/body)))))

    (use-package git-gutter
      :defer 0.3
      :delight
      :init (global-git-gutter-mode +1))

    (use-package git-timemachine
      :defer 1
      :delight)
#+end_src

*** YASnippet

#+begin_src emacs-lisp :tangle yes
(use-package yasnippet-snippets
  :after yasnippet
  :config (yasnippet-snippets-initialize))

(use-package yasnippet
  :delight yas-minor-mode " υ"
  :hook (yas-minor-mode . my/disable-yas-if-no-snippets)
  :config (yas-global-mode)
  :preface
  (defun my/disable-yas-if-no-snippets ()
    (when (and yas-minor-mode (null (yas--get-snippet-tables)))
      (yas-minor-mode -1))))

(use-package ivy-yasnippet :after yasnippet)
(use-package react-snippets :after yasnippet)
#+end_src
