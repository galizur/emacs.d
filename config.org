#+author: Karolos Triantafyllou
#+title: GNU Emacs Configuration
#+property: header-args:emacs-lisp :tangle ./config.el :mkdirp yes

* Table of Contents :TOC:
- [[#emacs-initialization][Emacs Initialization]]
  - [[#package-sources][Package Sources]]
  - [[#package-configuration][Package Configuration]]
- [[#startup][Startup]]
  - [[#authentication][Authentication]]
  - [[#better-defaults][Better defaults]]
  - [[#better-file-management-with-xdg][Better file management with XDG]]
  - [[#customization][Customization]]
  - [[#fonts][Fonts]]
  - [[#lsp][LSP]]
  - [[#meson][Meson]]
  - [[#package-manager][Package manager]]
  - [[#theme][Theme]]
  - [[#turn-off-mouse-interface][Turn off mouse interface]]
  - [[#saving-configuration][Saving Configuration]]
  - [[#backups][Backups]]
- [[#management][Management]]
  - [[#buffers][Buffers]]
  - [[#files][Files]]
  - [[#windows][Windows]]
- [[#minibuffer-completion][Minibuffer Completion]]
- [[#autocompletion][Autocompletion]]
- [[#spelling][Spelling]]
  - [[#abbreviations][Abbreviations]]
  - [[#flyspell][Flyspell]]
  - [[#spell-checker][Spell Checker]]
  - [[#grammar-checker][Grammar Checker]]
- [[#programming-languages-and-tools][Programming Languages and Tools]]
  - [[#bash][Bash]]
  - [[#c][C++]]
  - [[#cmake][CMake]]
  - [[#csv][CSV]]
  - [[#dart-and-flutter][Dart and Flutter]]
  - [[#dockerfile][Dockerfile]]
  - [[#epub][EPUB]]
  - [[#glsl][GLSL]]
  - [[#gnuplot][Gnuplot]]
  - [[#ini][INI]]
  - [[#java][Java]]
  - [[#javascript][JavaScript]]
  - [[#json][JSON]]
  - [[#latex][LaTex]]
  - [[#lua][Lua]]
  - [[#markdown][Markdown]]
  - [[#php-and-html][PHP and HTML]]
  - [[#plantuml][PlantUML]]
  - [[#python][Python]]
  - [[#sql][SQL]]
  - [[#stylesheet][Stylesheet]]
  - [[#typescript][Typescript]]
  - [[#xml][XML]]
  - [[#yaml][YAML]]
- [[#advanced-configuration][Advanced Configuration]]
  - [[#browser][Browser]]
  - [[#calculator][Calculator]]
  - [[#calendar][Calendar]]
  - [[#color-display-in-text][Color Display in Text]]
  - [[#dashboard][Dashboard]]
  - [[#display-available-keybindings-in-popup][Display Available keybindings in Popup]]
  - [[#documentation][Documentation]]
  - [[#editor-config][Editor Config]]
  - [[#history][History]]
  - [[#hydra][Hydra]]
  - [[#icons][Icons]]
  - [[#indentations][Indentations]]
  - [[#linters][Linters]]
  - [[#email][Email]]
  - [[#money-management][Money Management]]
  - [[#package-menu][Package Menu]]
  - [[#parentheses][Parentheses]]
  - [[#paste][Paste]]
  - [[#pdf][PDF]]
  - [[#project-interactions][Project Interactions]]
  - [[#snippets][Snippets]]
  - [[#spaces-around-operators][Spaces Around Operators]]
  - [[#recent-files][Recent Files]]
  - [[#term-definitions][Term Definitions]]
  - [[#try-packages][Try packages]]
  - [[#version-control-system][Version Control System]]
  - [[#whitespaces-and-kill][Whitespaces and Kill]]
  - [[#undo-tree][Undo-tree]]
  - [[#multiple-cursors][Multiple cursors]]
- [[#org-mode][Org Mode]]
  - [[#first-steps][First steps]]
  - [[#agenda][Agenda]]
  - [[#bullets][Bullets]]
  - [[#capture][Capture]]
  - [[#clock][Clock]]
  - [[#contacts][Contacts]]
  - [[#faces][Faces]]
  - [[#languages][Languages]]
  - [[#journal][Journal]]

* Emacs Initialization

This section contains information on how to properly initialize your GNU/Emacs.

** Package Sources

In order to install packages, we first must configure their sources.

#+begin_src emacs-lisp
  (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
#+end_src

** Package Configuration

=use-package= is used to install and manage packages and configurations. We first install it with the following snippet.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (use-package delight :ensure t)
  (use-package use-package-ensure-system-package :ensure t)
#+end_src

* Startup

This section contains packages and configurations to get started with GNU/Emacs.

** Authentication

#+begin_src emacs-lisp
  (use-package auth-source
    :ensure nil
    :custom
    (auth-sources '("~/.config/gnupg/shared/authinfo.gpg"
                    "~/.authinfo.gpg"
                    "~/.authinfo"
                    "~/.netrc")))
#+end_src

** Better defaults

Here are some changed default values, for a better Emacs experience.

#+begin_src emacs-lisp
  (setq-default
   ad-redefinition-action 'accept                      ; Silence warnings for redefinition.
   cursor-in-non-selected-windows t                    ; Hide the cursor in inactive windows.
   display-time-default-load-average nil               ; Don't display the load average.
   fill-column 120                                     ; Set width for automatic line break/wrap.
   help-window-select t                                ; Focus on new help windows when opened.
   indent-tabs-mode nil                                ; Use spaces over tabs.
   inhibit-startup-screen t                            ; Disable start-up screen.
   initial-scratch-message ""                          ; Clear the initial *scratch* buffer.
   kill-ring-max 128                                   ; Maximum length of the kill ring.
   mark-ring-max 128                                   ; Maximum length of the mark ring.
   load-prefer-newer t                                 ; Prefer the newest version of a file.
   read-process-output-max (* 1024 1024)               ; Increase the amount of data reads from the process.
   scroll-conservatively most-positive-fixnum          ; Always scroll by one line;
   select-enable-clipboard t                           ; Merge system's and Emacs's clipboards.
   tab-width 4                                         ; Set the width for tabs.
   use-package-always-ensure t                         ; Avoid the :ensure keyword for each package.
   user-full-name "Karolos Triantafyllou"              ; Set the full name of the current user.
   user-mail-address "karolos.triantafyllou@gmail.com" ; Set the email address of the current user.
   vc-follow-symlinks t                                ; Always follow the symlinks.
   view-read-only t                                    ; Always open read-only buffers in view-mode.
   c-basic-offset 4                                    ; Set the base offset for C/C++.
   c-default-style "stroustrup")                       ; Set the default style of C/C++
  (global-display-line-numbers-mode t)                 ; Always show line numbers.
  (column-number-mode 1)                               ; Show column number.
  (fset 'yes-or-no-p 'y-or-n-p)                        ; Replace yes/no prompts with y/n.
  (global-hl-line-mode)                                ; Highlight current line.
  (set-default-coding-systems 'utf-8)                  ; Set default encoding to UTF-8.
  (show-paren-mode 1)                                  ; Show matching parentheses.
#+end_src

** Better file management with XDG

In order to keep =~/.emacs.d= and =home= folders as clean as possible, we will follow the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG base directory specification]]. GNU Emacs won't create the appropriate folders if they do not exist. So we create them ourselves.

#+begin_src shell
  mkdir ~/.cache/emacs ~/.local/share/emacs/
#+end_src

#+begin_src emacs-lisp
  (defvar xdg-bin (getenv "XDG_BIN_HOME")
    "The XDG bin base directory.")
  (defvar xdg-cache (getenv "XDG_CACHE_HOME")
    "The XDG cache base directory.")
  (defvar xdg-config (getenv "XDG_CONFIG_HOME")
    "The XDG config base directory.")
  (defvar xdg-data (getenv "XDG_DATA_HOME")
    "The XDG data base directory.")
  (defvar xdg-lib (getenv "XDG_LIB_HOME")
    "The XDG lib base directory.")
#+end_src

Some packages implicitly use the [[https://github.com/tkf/emacs-request][request]] package to make HTTP requests. By default, the data for this package is stored int the GNU Emacs directory. We'll change this value to respect the XDG specifications.

#+begin_src emacs-lisp
  (use-package request
    :custom
    (request-storage-directory (expand-file-name (format "%s/emacs/request/" xdg-data))))
#+end_src

Similarly, GNU Emacs has the built-in =url-cookie= package to maintain cookies. We are changing this value as well.

#+begin_src emacs-lisp
  (use-package url-cookie
    :ensure nil
    :custom
    (url-cookie-file (expand-file-name (format "%s/emacs/url/cookies/" xdg-data))))
#+end_src

** Customization

To avoid overloading the GNU Emacs customization =init.el= file, we add the generated code in a separate file.

#+begin_src emacs-lisp
  (use-package cus-edit
    :ensure nil
    :custom (custom-file (expand-file-name (format "%s/emacs/custom.el" xdg-data)))
    :config
    (when (file-exists-p custom-file)
      (load custom-file t)))
#+end_src

** Fonts

We use =Cascadia Code= as our font, for it's good legibility and ligature support.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Cascadia Code")
  (set-fontset-font t 'latin "Noto Sans")
  (set-fontset-font t 'symbol "Noto Color Emoji")
  (set-fontset-font t 'symbol "Twitter Color Emoji")
#+end_src

We usually have to install the font with the system's package manager. It's also a good idea to check if it has been installed correctly.

#+begin_src shell
  fc-list | grep "Cascadia Code"
#+end_src

*** Ligatures

Since GNU Emacs doesn't automatically enable ligatures, we have to enable them ourselves.

#+begin_src emacs-lisp
  (use-package ligature
    :load-path "~/.emacs.d/ligatures/"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

** LSP

Using LSP (Language Server Protocol) to configure the management of our programming languages, means that LSP servers can be used by other text editors, increasing the contribution to these packages.

[[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] can be used with multiple LSP servers, making it perfect for our use.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook ((prog-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :custom
    (lsp-enable-folding nil)
    (lsp-enable-links nil)
    (lsp-enable-snippet nil)
    (lsp-enable-autorestart t)
    (lsp-keymap-prefix "C-c ;")
    (lsp-session-file (expand-file-name (format "%s/emacs/lsp-session-v1" xdg-data)))
    (read-process-output-max (* 1024 1024)))
  #+end_src

  =lsp-ui= is used to get information when hovering over a variable or function.

#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))
#+end_src

When we encounter programming errors, we can use the minibuffer to navigate through said errors. Since we are going to be using =consult=, =consult-lsp= is perfect for this situation.

#+begin_src emacs-lisp
  (use-package consult-lsp
    :commands (consult-lsp-diagnostics consult-lsp-symbols))
#+end_src

Finally, we will need a debugger at some point. [[https://github.com/emacs-lsp/dap-mode][dap-mode]] uses the Debug Adapter Protocol for communication between the client and Debug Server.

#+begin_src emacs-lisp
  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-mode t)
    (dap-ui-mode t))
#+end_src

** Meson

#+begin_src emacs-lisp
  (use-package meson-mode
    :hook (meson-mode . company-mode))
#+end_src

** Package manager

=use-package= is not a package manager, so we need a different one to download packages that are not available in package sources. That's where [[https://github.com/raxod502/straight.el][straight.el]] comes in play.

#+begin_src emacs-lisp
  ;; Bootstrap straight
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Integrate 'straight' directly into the 'use-package' package through the ':straight' expression.
  (straight-use-package 'use-package)
  #+end_src

** Theme

I am a huge fan of the [[https://www.nordtheme.com/][nord]] color theme, but feel free to switch and swap to whatever is your preference. Doom modeline gives a nice visual representation of a lot of things. The only thing extra needed is to install [[#icons][icons]].

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-nord t)
    (doom-themes-org-config))

  (use-package doom-modeline
    :init (doom-modeline-mode)
    :custom
    (doom-modeline-icon (display-graphic-p))
    (doom-modeline-mu4e t))
  #+end_src

Solaire-mode can help us differentiate between our actual buffers, from ones that are informative or pop-ups, by giving the latter a darker color.

#+begin_src emacs-lisp
  (use-package solaire-mode
    :defer 0.1
    :custom (solaire-mode-remap-fringe t)
    :config (solaire-global-mode))
#+end_src

** Turn off mouse interface

With GNU Emacs we focus on using just the keyboard. All other elements are switched off.

#+begin_src emacs-lisp
  (when window-system
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1))
#+end_src

** Saving Configuration

A good practice is to use an =.org= file to modify the configuration of GNU Emacs and then load said configuration from an =.el= file. This keeps the fast load times, gives us the ability to write comments such as these and many other features.

Using the package [[https://github.com/jwiegley/emacs-async][async]] and the =org-babel-tangle= command, the code below will update the =config.el= file asynchronously when saved. After that, we specify in the =init.el= that we load the =config.el= file.

#+begin_src emacs-lisp
  (use-package async
    :after org
    :preface
    (defvar config-file (expand-file-name "config.org" user-emacs-directory)
      "The configureation file.")

    (defvar config-last-change (nth 5 (file-attributes config-file))
      "Last modification time of the configuration file.")

    (defvar show-async-tangle-results nil
      "Keeps *emacs* async buffers around for later inspection.")

    (defun my/config-updated ()
      "Check if the configuration file has been updated since the last time."
      (time-less-p config-last-change
                   (nth 5 (file-attributes config-file))))

    (defun my/config-tangle ()
      "Tangles the org file asynchronously."
      (when (my/config-updated)
        (setq config-last-change
              (nth 5 (file-attributes config-file)))
        (my/async-babel-tangle config-file)))

    (defun my/async-babel-tangle (org-file)
      "Tangles the org file asynchronously."
      (let ((init-tangle-start-time (current-time))
            (file (buffer-file-name))
            (async-quiet-switch "-q"))
        (async-start
         `(lambda ()
            (require 'org)

            (org-babel-tangle-file ,org-file))
         (unless show-async-tangle-results
           `(lambda (result)
              (if result
                  (message "[✓] %s successfully tangled (%.2fs)"
                           ,org-file
                           (float-time (time-subtract (current-time)
                                                      ',init-tangle-start-time)))
                (message "[✗] %s as tangle failed." ,org-file))))))))
#+end_src

** Backups

Having backups of files is always a good idea.

#+begin_src emacs-lisp
  (use-package files
    :ensure nil
    :preface
    (defvar afilename-cmd
      `((,(format "%s/X11/Xresources" xdg-config) . ,(format "xrdb -merge %s/X11/Xresources" xdg-config))
        (,(format "%s/xbindkeysrc" (getenv "HOME")) . "xbindkeys -p"))
      "File association list with their respective command.")

    (defun my/cmd-after-saved-file ()
      "Execute a command after saved a specific file."
      (let* ((match (assoc (buffer-file-name) afilename-cmd)))
        (when match
          (shell-command (cdr match)))))
    :hook (after-save . my/cmd-after-saved-file)
    :init
    ;; Create the "~/.cache/emacs/auto-save" folder if it doesn't exist.
    (let ((auto-save-folder (expand-file-name
                             (file-name-as-directory
                              (expand-file-name (format "%s/emacs/auto-save/" xdg-cache))))))
      (unless (file-exists-p (locate-user-emacs-file auto-save-folder))
        (make-directory (locate-user-emacs-file auto-save-folder))))
    :custom
    (auto-save-file-name-transforms
     `((".*" ,(expand-file-name (format "%s/emacs/auto-save/" xdg-cache) t))))
    (backup-directory-alist
     `(("." . ,(expand-file-name (format "%s/emacs/backups/" xdg-data)))))
    (delete-old-versions t)
    (vc-make-backup-files t)
    (version-control t))
#+end_src

* Management

** Buffers

#+begin_src emacs-lisp
  (use-package ibuffer
    :ensure nil
    :preface
    (defvar protected-buffers '("*scratch*" "*Messages*")
      "Buffers that cannot be killed.")

    (defun my/protected-buffers ()
      "Protects some buffers from being killed."
      (dolist (buffer protected-buffers)
        (with-current-buffer buffer
          (emacs-lock-mode 'kill))))

    :bind ("C-x C-b" . ibuffer)
    :init (my/protected-buffers))

  (use-package imenu
    :ensure nil
    :preface
    (defun my/smarter-move-beginning-of-line (arg)
      "Move point back to indentation of beginning of line.

   Move point to the first non-whitespace character on this line.
   If point is already there, move to the beginning of the line.
   Effectively toggle between the first non-whitespace character and
   the beginning of the line.

   If ARG is not nil or 1, move forward ARG - 1 lines first. If
   point reaches the beginning or end of the buffer, stop there."
      (interactive "^p")
      (setq arg (or arg 1))

      ;; Move lines first
      (when (/= arg 1)
        (let ((line-move-visual nil))
          (forward-line (1- arg))))

      (let ((orig-point (point)))
        (back-to-indentation)
        (when (= orig-point (point))
          (move-beginning-of-line 1))))
    :bind
    (("C-a" . my/smarter-move-beginning-of-line)
     ("C-r" . imenu)))

  (use-package move-text
    :bind (("M-p" . move-text-up)
           ("M-n" . move-text-down))
    :config (move-text-default-bindings))
#+end_src

** Files

#+begin_src emacs-lisp
  (use-package autorevert
    :ensure nil
    :delight auto-revert-mode
    :bind ("C-x R" . revert-buffer)
    :custom (auto-revert-verbose nil)
    :config (global-auto-revert-mode))

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (:map dired-mode-map
                ("h" . dired-up-directory)
                ("j" . dired-next-line)
                ("k" . dired-previous-line)
                ("l" . dired-single-buffer))
    :delight "Dired "
    :custom
    (dired-auto-revert-buffer t)
    (dired-dwim-target t)
    (dired-hide-details-hide-symlink-targets nil)
    (dired-listing-switches "-alh --group-directories-first")
    (dired-ls-F-marks-symlinks nil)
    (dired-recursive-copies 'always))

  (use-package dired-single
    :after dired
    :bind (:map dired-mode-map
                ([remap dired-find-file] . dired-single-buffer)
                ([remap dired-up-directory] . dired-single-up-directory)
                ("M-DEL" . dired-prev-subdir)))

  (use-package dired-open
    :after (dired dired-jump)
    :custom (dired-open-extensions '(("mp4" . "mpv"))))

  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
      :bind (:map dired-mode-map
                  ("H" . dired-hide-dotfiles-mode)))

  (use-package dired-subtree
    :after dired
    :bind (:map dired-mode-map
                  ("<tab>" . dired-subtree-toggle)))

  (use-package dired-narrow
    :ensure nil
    :bind (("C-c C-n" . dired-narrow)
           ("C-c C-f" . dired-narrow-fuzzy)))
#+end_src

** Windows

#+begin_src emacs-lisp
  (use-package window
    :ensure nil
    :bind (("C-x 3" . hsplit-last-buffer)
           ("C-x 2" . vsplit-last-buffer)
           ;; Don't ask before killing a buffer.
           ([remap kill-buffer] . kill-this-buffer))
    :preface
    (defun hsplit-last-buffer ()
      "Gives the focus to the last created horizontal window."
      (interactive)
      (split-window-horizontally)
      (other-window 1))

    (defun vsplit-last-buffer ()
      "Gives the focus to the last created vertical window."
      (interactive)
      (split-window-vertically)
      (other-window 1)))

  (use-package centered-window
    :custom
    (cwm-centered-window-width 130)
    (cwm-frame-internal-border 0)
    (cwm-incremental-padding t)
    (cwm-incremental-padding-% 2)
    (cwm-left-fringe-ratio 0)
    (cwm-use-vertical-padding t)
    :config (centered-window-mode t))

  (use-package switch-window
    :bind (("C-x o" . switch-window)
           ("C-x w" . switch-window-then-swap-buffer)))

  (use-package winner
    :ensure nil
    :config (winner-mode))
#+end_src

* Minibuffer Completion

#+begin_src emacs-lisp
  (use-package vertico
    :straight (:files (:defaults "extensions/*"))
    :init (vertico-mode)
    :bind (:map vertico-map
                ("C-<backspace>" . vertico-directory-up))
    :custom (vertico-cycle t)
    :custom-face (vertico-current ((t (:background "#1d1f21")))))

  (use-package marginalia
    :after vertico
    :init (marginalia-mode)
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))

  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))

  (use-package orderless
    :custom
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles . (partial-completion)))))
    (completion-styles '(orderless)))

  (use-package consult
    :after projectile
    :bind (;; Related to the control commands.
           ("<help> a" . consult-apropos)
           ("C-x b" . consult-buffer)
           ("C-x M-:" . consult-complex-command)
           ("C-c k" . consult-kmacro)
           ;; Related to navigation
           ("M-g a" . consult-org-agenda)
           ("M-g e" . consult-error)
           ("M-g g" . consult-goto-line)
           ("M-g h" . consult-org-heading)
           ("M-g i" . consult-imenu)
           ("M-g k" . consult-global-mark)
           ("M-s l" . consult-line)
           ("M-g m" . consult-mark)
           ("M-g o" . consult-outline)
           ("M-g I" . consult-project-imenu)
           ;; Related to search and selection
           ("M-s G" . consult-git-grep)
           ("M-s g" . consult-grep)
           ("M-s k" . consult-keep-lines)
           ("M-s l" . consult-locate)
           ("M-s m" . consult-multi-occur)
           ("M-s r" . consult-ripgrep)
           ("M-s u" . consult-focus-lines)
           ("M-s f" . consult-find))
    :custom
    (completion-in-region-function #'consult-completion-in-region)
    (consult-narrow-key "<")
    (consult-project-root-function #'projectile-project-root)
    ;; Provides consistent display for both 'consult-register' and the register preview when editing registers.
    (register-preview-delay 0)
    (register-preview-function #'consult-register-preview))

  (use-package embark
    :bind ("C-.". embark-act))

  (use-package consult-yasnippet
    :straight (consult-yasnippet
               :type git
               :host github
               :repo "mohkale/consult-yasnippet"))
#+end_src

* Autocompletion

#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay 0.5)
    (company-minimum-prefix-length 1)
    (company-show-quick-access t)
    (company-tooltip-align-annotations 't))

  (use-package company-box
    :if (display-graphic-p)
    :after company
    :hook (company-mode . company-box-mode))
#+end_src

* Spelling

** Abbreviations

#+begin_src emacs-lisp
  (use-package abbrev
    :ensure nil
    :delight
    :hook (text-mode . abbrev-mode)
    :custom (abbrev-file-name (expand-file-name (format "%s/emacs/abbrev_defs" xdg-data)))
    :config
    (if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file)))
#+end_src

** Flyspell

#+begin_src emacs-lisp
  (use-package flyspell
    :ensure nil
    :delight
    :hook ((text-mode . flyspell-mode)
           (prog-mode . flyspell-prog-mode))
    :custom
    ;; Add correction to abbreviation table.
    (flyspell-abbrev-p t)
    (flyspell-default-dictionary "en_US")
    (flyspell-issue-message-flag nil)
    (flyspell-issue-welcome-flag nil))
#+end_src

** Spell Checker

#+begin_src emacs-lisp
  (use-package ispell
    :preface
    (defun my/switch-language ()
      "Switches between the English and Greek language for ispell, flyspell and LanguageTool."
      (interactive)
      (let* ((current-dictionary ispell-current-dictionary)
             (new-dictionary (if (string= current-dictionary "en_US") "el_GR" "en_US")))
        (ispell-change-dictionary new-dictionary)
        (if (string= new-dictionary "el_GR")
            (progn
              (setq lsp-ltex-language "gr"))
          (progn
            (setq lsp-ltex-language "en-US")))
        (flyspell-buffer)
        (message "[✓] Dictionary switched to %s" new-dictionary)))
    :custom
    (ispell-hunspell-dict-paths-alist
   '(("en_US" "/usr/share/hunspell/en_US.aff")
     ("el_GR" "/usr/share/hunspell/el_GR.aff")))
  ;; Save words in personal dictionary without asking
  (ispell-silently-savep t)
  :config
  (setenv "LANG" "en_US")
  (cond ((executable-find "hunspell")
         (setq ispell-program-name "hunspell")
         (setq ispell-local-dictionary-alist '(("en_US"
                                                "[[:alpha:]]"
                                                "[^[:alpha:]]"
                                                "[''-]"
                                                t
                                                ("-d" "en_US")
                                                nil
                                                utf-8)
                                               ("el_GR"
                                                "[[:alpha:]]"
                                                "[^[:alpha:]]"
                                                "[''-]"
                                                t
                                                ("-d" "el_GR")
                                                nil
                                                utf-8))))
        ((executable-find "aspell")
         (setq ispell-program-name "aspell")
         (setq ispell-extra-args '("--sug-mode=ultra"))))
  ;; Ignore file sections for spell checking.
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_align" . "#\\+end_align"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_align*" . "#\\+end_align*"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_equation" . "#\\+end_equation"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_equation*" . "#\\+end_equation*"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_example" . "#\\+end_example"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_labeling" . "#\\+end_labeling"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))
  (add-to-list 'ispell-skip-region-alist '("\\$" . "\\$"))
  (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:")))
#+end_src

** Grammar Checker

#+begin_src emacs-lisp
  (use-package lsp-ltex
    :disabled
    :custom
    (lsp-ltex-enabled nil)
    (lsp-ltex-mother-tongue "en-US"))
#+end_src

* Programming Languages and Tools

** Bash

#+begin_src emacs-lisp
  (use-package sh-script
    :ensure nil
    :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src

** C++

#+begin_src emacs-lisp
  ;; (use-package ccls
  ;;   :after projectile
  ;;   :hook ((c-mode c++-mode objc-mode cuda-mode) . lsp-deferred)
  ;;   :custom
  ;;   (ccls-args nil)
  ;;   (ccls-executable (executable-find "ccls"))
  ;;   (projectile-project-root-files-top-down-recurring
  ;;    (append '("compile_commands.json" ".ccls")
  ;;            projectile-project-root-files-top-down-recurring))
  ;;   :config (add-to-list 'projectile-globally-ignored-directories ".ccls-cache"))

  ;; (use-package google-c-style
  ;;   :hook (((c-mode c++-mode) . google-set-c-style)
  ;;          (c-mode-common . google-make-newline-indent)))
#+end_src

** CMake

#+begin_src emacs-lisp
  (use-package cmake-mode
    :hook (cmake-mode . lsp-deferred)
    :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))

  (use-package cmake-font-lock
    :hook (cmake-mode . cmake-font-lock-activate))
#+end_src

** CSV

#+begin_src emacs-lisp
  (use-package csv-mode :mode ("\\.\\(csv\\|tsv\\)\\'"))
#+end_src

** Dart and Flutter

#+begin_src emacs-lisp
  (use-package dart-mode
    :after projectile
    :mode "\\.dart\\'"
    :config
    (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
    (add-to-list 'projectile-project-root-files-bottom-up "BUILD"))

  (use-package lsp-dart
    :hook (dart-mode . lsp-deferred)
    :custom
    (lsp-dart-dap-flutter-hot-reload-on-save t)
    (lsp-dart-sdk-dir "/opt/flutter/bin/cache/dart-sdk/"))
#+end_src

** Dockerfile

#+begin_src emacs-lisp
  (use-package dockerfile-mode :delight "δ" :mode "Dockerfile\\'")
#+end_src

** EPUB

#+begin_src emacs-lisp
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode)
    :custom (nov-text-width 75))
#+end_src

** GLSL

#+begin_src emacs-lisp
    (use-package glsl-mode)
#+end_src

** Gnuplot

#+begin_src emacs-lisp
  (use-package gnuplot
    :mode "\\.\\(gp\\|gpi\\|plt\\)'"
    :bind (:map gnuplot-mode-map
                ("C-c C-c" . gnuplot-send-buffer-to-gnuplot)))
#+end_src

** INI

#+begin_src emacs-lisp
  (use-package ini-mode :mode "\\.ini\\'")
#+end_src

** Java

#+begin_src emacs-lisp
  (use-package lsp-java
    :hook (java-mode . lsp-deferred)
    :custom (lsp-java-server-install-dir
             (expand-file-name (format "%s/eclipse.jdt.ls/server" xdg-lib))))

  (use-package gradle-mode
    :hook (java-mode . gradle-mode)
    :preface
    (defun my/switch-to-compilation-window ()
      "Switches to the *compilation* buffer after compilation."
      (other-window 1))
    :bind (:map gradle-mode-map
           ("C-c C-c" . gradle-build)
           ("C-c C-t" . gradle-test))
    :config
    (advice-add 'gradle-build :after #'my/switch-to-compilation-window)
    (advice-add 'gradle-test :after #'my/switch-to-compilation-window))
#+end_src

** JavaScript

#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure flycheck
    :mode "\\.js\\'"
    :hook ((js2-mode . js2-imenu-extras-mode)
           (js2-mode . prettier-js-mode))
    :custom (js-indent-level 2)
    :config (flycheck-add-mode 'javascript-eslint 'js2-mode))

  (use-package prettier-js
    :delight
    :custom (prettier-js-args '("--print-width" "100"
                                "--single-quote" "true"
                                "--trailing-comma" "all")))

  (use-package js2-refactor
    :hook (js2-mode . js2-refactor-mode)
    :bind (:map js2-mode-map
                ("C-k" . js2r-kill)
                ("M-." . lsp-find-definition)))

  (use-package yarn-mode :mode "yarn\\.lock\\'")
#+end_src

** JSON

#+begin_src emacs-lisp
(use-package json-mode
  :delight "J "
  :mode "\\.json\\'"
  :hook (before-save . my/json-mode-before-save-hook)
  :preface
  (defun my/json-mode-before-save-hook ()
    (when (eq major-mode 'json-mode)
      (json-pretty-print-buffer)))

  (defun my/json-array-of-numbers-on-one-line (encode array)
    "Prints the arrays of numbers in one line."
    (let* ((json-encoding-pretty-print
            (and json-encoding-pretty-print
                 (not (loop for x across array always (numberp x)))))
           (json-encoding-seperator (if json-encoding-pretty-print "," ", ")))
      (funcall encode array)))
  :config (advice-add 'json-encode-array :around #'my/json-array-of-numbers-on-one-line))
#+end_src

** LaTex

#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :preface
    (defun my/switch-to-help-window (&optional ARG REPARSE)
      "Switches to the *TeX Help* buffer after compilation."
      (other-window 1))
    :hook (LaTeX-mode . reftex-mode)
    :bind (:map TeX-mode-map
                ("C-c C-o" . TeX-recenter-output-buffer)
                ("C-c C-l" . TeX-next-error)
                ("M-[" . outline-previous-heading)
                ("M-]" . outline-next-heading))
    :custom
    (TeX-auto-save t)
    (TeX-byte-compile t)
    (TeX-clean-confirm nil)
    (TeX-master 'dwim)
    (TeX-parse-self t)
    (TeX-PDF-mode t)
    (TeX-source-correlate-mode t)
    (TeX-view-program-selection '((output-pdf "PDF Tools")))
    :config
    (advice-add 'TeX-next-error :after #'my/switch-to-help-window)
    (advice-add 'TeX-recenter-output-buffer :after #'my/switch-to-help-window)
    ;; the ":hook" doesn't work for this one... don't ask me why.
    (add-hook 'TeX-after-compilation-finished-functions 'TeX-revert-document-buffer))
#+end_src

Also, I like to use a TeX engine that can handle Unicode and use the font of my
choice.

#+begin_src emacs-lisp
  (setq-default TeX-engine 'xetex)

  (use-package lsp-latex
    :if (executable-find "texlab")
    ;; To properly load 'lsp-latex', the 'require' instruction is important.
    :hook (LaTeX-mode . (lambda ()
                          (require 'lsp-latex)
                          (lsp-deferred)))
    :custom
    (lsp-latex-build-on-save t))

  (use-package reftex
    :ensure nil
    :custom
    (reftex-save-parse-info t)
    (reftex-use-multiple-selection-buffers t))

  (use-package bibtex
    :ensure nil
    :preface
    (defun my/bibtex-fill-column ()
      "Ensures that each entry does not exceed 120 characters."
      (setq fill-column 120))
    :hook ((bibtex-mode . lsp-deferred)
           (bibtex-mode . my/bibtex-fill-column)))
#+end_src

** Lua

#+begin_src emacs-lisp
(use-package lua-mode :delight "Λ " :mode "\\.lua\\'")
#+end_src

** Markdown

To edit my files in Markdown, I use [[https://github.com/jrblevin/markdown-mode][markdown-mode]] with [[https://emacs-lsp.github.io/lsp-mode/page/lsp-markdown/][unified-language-server]]
as LSP server. To use it, do not forget to configure the LSP package and to
install this LSP server with your system package manager. Added to that, to
convert Markdown files, you can also install [[https://github.com/jgm/pandoc][pandoc]] with your package manager
system.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :delight "μ"
    :mode ("\\.\\(md\\|markdown\\)\\'")
    :custom (markdown-command "/usr/bin/pandoc"))
#+end_src

Finally, it is always good to have a preview of the Markdown rendering. The
[[https://github.com/ancane/markdown-preview-mode][markdown-preview-mode]] package allows this.

#+begin_src emacs-lisp
  (use-package markdown-preview-mode
    :commands markdown-preview-mode
    :custom
    (markdown-preview-javascript
     (list (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/highlight.min.js")
           "<script>
              $(document).on('mdContentChange', function() {
                $('pre code').each(function(i, block)  {
                  hljs.highlightBlock(block);
                });
              });
            </script>"))
    (markdown-preview-stylesheets
     (list (concat "https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/"
                   "3.0.1/github-markdown.min.css")
           (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/styles/github.min.css")

           "<style>
              .markdown-body {
                box-sizing: border-box;
                min-width: 200px;
                max-width: 980px;
                margin: 0 auto;
                padding: 45px;
              }

              @media (max-width: 767px) { .markdown-body { padding: 15px; } }
            </style>")))
#+end_src

** PHP and HTML

#+begin_src emacs-lisp
  (use-package web-mode
    :delight "☸"
    :preface
    (defun enable-minor-mode (my-pair)
      "Enable minor mode if filename match the regexp."
      (if (buffer-file-name)
          (if (string-match (car my-pair) buffer-file-name)
              (funcall (cdr my-pair)))))
    :mode ("\\.\\(html\\|jsx\\|php\\)\\'" . web-mode)
    :hook (web-mode . (lambda ()
                       (enable-minor-mode
                        '("\\.jsx?\\'" . prettier-js-mode))))
    :custom
    (web-mode-attr-indent-offset 2)
    (web-mode-block-padding 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-comment-style 2)
    (web-mode-enable-current-element-highlight t)
    (web-mode-markup-indent-offset 2))
#+end_src

** PlantUML

#+begin_src emacs-lisp
  (use-package plantuml-mode
    :mode ("\\.\\(plantuml\\|puml\\)\\'")
    :custom (plantuml-jar-path
             (expand-file-name (format "%s/plantuml.jar" xdg-lib))))
#+end_src

** Python

#+begin_src emacs-lisp
  (use-package python
    :ensure flycheck
    :delight "π "
    :preface
    (defun python-remove-unused-imports()
      "Removes unused imports and unused variables with autoflake."
      (interactive)
      (if (executable-find "autoflake")
          (progn
            (shell-command (format "autoflake --remove-all-unused-imports -i %s"
                                   (shell-quote-argument (buffer-file-name))))
            (revert-buffer t t t))
        (warn "[✗] python-mode: Cannot find autoflake executable.")))
    :bind (:map python-mode-map
                  ("M-[" . python-nav-backward-block)
                  ("M-]" . python-nav-forward-block)
                  ("M-|" . python-remove-unused-imports))
    :custom
    (flycheck-pylintrc "~/.pylintrc")
    (flycheck-python-pylint-executable "/usr/bin/pylint"))

  (use-package lsp-pyright
    :if (executable-find "pyright")
    ;; To properly load 'lsp-pyright', the 'require' instruction is important.
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred)))
    :custom
    (lsp-pyright-python-executable-cmd "python3")
    (lsp-pyright-venv-path "~/.cache/pypoetry/virtualenvs/"))

  (use-package blacken
    :delight
    :hook (python-mode . blacken-mode)
    :custom (blacken-line-length 100))

  (use-package py-isort
    :hook ((before-save . py-isort-before-save)
           (python-mode . pyvenv-mode)))
#+end_src

I use a single virtual environment for all my Python projects. The combination
of [[https://docs.python.org/3/library/venv.html][venv]] with [[https://github.com/jorgenschaefer/pyvenv][pyvenv]] does the job well. When I encounter a Python buffer, my
virtual environment activates and stays activated even after I finish working in
Python. A better behavior would be to define a function through a
=kill-buffer-hook= that would call the =pyvenv-deactivate= command when all Python
buffers are closed.

#+begin_src emacs-lisp
  (use-package pyvenv
    :after python
    :custom
    (pyvenv-default-virtual-env-name (expand-file-name (format "%s/myenv/" xdg-data)))
    (pyvenv-workon (expand-file-name (format "%s/myenv/" xdg-data)))
    :config (pyvenv-tracking-mode))

  (use-package pyenv-mode
    :hook ((python-mode . pyenv-mode)
           (projectile-switch-project . projectile-pyenv-mode-set))
    :custom (pyenv-mode-set "3.8.5")
    :preface
    (defun projectile-pyenv-mode-set ()
      "Set pyenv version matching project name"
      (let ((project (projectile-project-name)))
        (if (member project (pyenv-mode-versions))
            (pyenv-mode-set project)
          (pyenv-mode-unset)))))
#+end_src

** SQL

#+begin_src emacs-lisp
  (use-package sql-mode
    :ensure nil
    :mode "\\.sql\\'")

  (use-package sql-indent
    :delight sql-mode "Σ"
    :hook (sql-mode . sqlind-minor-mode))
#+end_src

** Stylesheet

#+begin_src emacs-lisp
  (use-package css-mode
    :ensure flycheck
    :mode "\\.css\\'"
    :custom (css-indent-offset 2)
    :config (flycheck-stylelintrc "~/.stylelintrc.json"))
#+end_src

** Typescript

#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure flycheck
    :hook ((typescript-mode . prettier-js-mode)
           (typescript-mode . lsp-deferred))
    :mode ("\\.\\(ts\\|tsx\\)\\'")
    :custom
    ;; TSLint is depracated in favor of ESLint
    (flycheck-disable-checker 'typescript-tslint)
    (lsp-clients-typescript-server-args '("--stdio" "--tsserver-log-file" "/dev/stderr"))
    (typescript-indent-level 2)
    :config
    (flycheck-add-mode 'javascript-eslint 'typescript-mode))
#+end_src

** XML

#+begin_src emacs-lisp
  (use-package nxml-mode
    :ensure nil
    :hook (nxml-mode . lsp-deferred)
    :mode ("\\.\\(xml\\|xsd\\|wsdl\\)\\'"))
#+end_src

** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode
    :delight "ψ"
    :hook (yaml-mode . lsp-deferred)
    :mode ("\\.\\(yaml\\|yml\\)\\'"))
#+end_src

* Advanced Configuration

** Browser

#+begin_src emacs-lisp
  (use-package browse-url
    :ensure nil
    :custom
    (browse-url-browser-function 'browse-url-generic)
    (browse-url-generic-program "firefox"))
#+end_src

** Calculator

#+begin_src emacs-lisp
  (use-package calc
    :ensure nil
    :custom
    (math-additional-units
     '((GiB "1024 * MiB" "Giga Byte")
       (MiB "1024 * KiB" "Mega Byte")
       (KiB "1024 * B" "Kilo Byte")
       (B nil "Byte")
       (Gib "1024 * Mib" "Giga Bit")
       (Mib "1024 * Kib" "Mega Bit")
       (Kib "1024 * b" "Kilo Bit")
       (b "B / 8" "Bit")))
    ;; Resets the calc's cache
    (math-units-table nil))
#+end_src

** Calendar

#+begin_src emacs-lisp
  (use-package calendar
    :ensure nil
    :bind ("C-c 0" . calendar)
    :custom
    (calendar-mark-holidays-flag t)
    (calendar-week-start-day 1))

  (use-package holidays
    :ensure nil
    :custom
    (holiday-bahai-holidays nil)
    (holiday-hebrew-holidays nil)
    (holiday-islamic-holidays nil)
    (holiday-oriental-holidays nil)
    (holiday-christian-holidays
     '((holiday-fixed 1 6 "Epiphany")
       (holiday-fixed 2 2 "Candlemas")
       (holiday-easter-etc -47 "Mardi Gras")
       (holiday-easter-etc 0 "Easter Day")
       (holiday-easter-etc 1 "Easter Monday")
       (holiday-easter-etc 39 "Ascension")
       (holiday-easter-etc 49 "Pentecost")
       (holiday-fixed 8 15 "Assumption")
       (holiday-fixed 11 1 "All Saints' Day")
       (holiday-fixed 11 2 "Day Of The Dead")
       (holiday-fixed 11 22 "Saint Cecilia's Day")
       (holiday-fixed 12 1 "Saint Eloi's Day")
       (holiday-fixed 12 4 "Saint Barbara")
       (holiday-fixed 12 6 "Saint Nicholas Day")
       (holiday-fixed 12 25 "Christmas Day")))
    (holiday-general-holidays
     '((holiday-fixed 1 1 "New Year's Day")
       (holiday-fixed 2 14 "Valentine's Day")
       (holiday-fixed 3 8 "International Women's Day")
       (holiday-fixed 10 31 "Halloween")
       (holiday-fixed 11 11 "Armistice of 1918")))
    ;; Need to fix these
    (holiday-local-holidays
     '((holiday-fixed 5 1 "Labor Day")
       (holiday-float 3 0 0 "Grandmothers' Day")
       (holiday-float 4 4 3 "Secretary's Day")
       (holiday-float 5 0 2 "Mother's Day")
       (holiday-float 6 0 3 "Father's Day"))))
#+end_src

** Color Display in Text

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :delight
    :hook ((prog-mode text-mode) . rainbow-mode))
#+end_src

** Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-banner-logo-title "With Great Power Comes Great Responsibility")
    (dashboard-center-content t)
    (dashboard-items '((agenda)
                       (projects . 5)))
    (dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
    (dashboard-set-file-icons t)
    (dashboard-set-footer nil)
    (dashboard-set-heading-icons t)
    (dashboard-set-navigator t)
    (dashboard-startup-banner 'logo)
    :config (dashboard-setup-startup-hook))
  #+end_src

** Display Available keybindings in Popup

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0.2
    :delight
    :custom (which-key-idle-delay 0.5)
    :config (which-key-mode))
#+end_src

** Documentation

To have a more user-friendly documentation I use the [[https://github.com/Wilfred/helpful][helpful]] package.

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-at-point
               helpful-callable
               helpful-command
               helpful-function
               helpful-key
               helpful-macro
               helpful-variable)
    :bind
    ([remap display-local-help] . helpful-at-point)
    ([remap describe-function] . helpful-callable)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-key] . helpful-key)
    ([remap describe-command] . helpful-command))
#+end_src

** Editor Config

#+begin_src emacs-lisp
  (use-package editorconfig
    :defer 0.3
    :config (editorconfig-mode))
#+end_src

** History

#+begin_src emacs-lisp
  (use-package savehist
    :ensure nil
    :custom
    (history-delete-duplicates t)
    (history-length 25)
    (savehist-file (expand-file-name (format "%s/emacs/history" xdg-cache)))
    :config (savehist-mode))
#+end_src

** Hydra

#+begin_src emacs-lisp
  (use-package hydra
    :bind (("C-c I" . hydra-image/body)
           ("C-c L" . hydra-ledger/body)
           ("C-c M" . hydra-merge/body)
           ("C-c T" . hydra-tool/body)
           ("C-c b" . hydra-btoggle/body)
           ("C-c c" . hydra-clock/body)
           ("C-c f" . hydra-flycheck/body)
           ("C-c g" . hydra-go-to-file/body)
           ("C-c m" . hydra-magit/body)
           ("C-c o" . hydra-org/body)
           ("C-c p" . hydra-projectile/body)
           ("C-c s" . hydra-spelling/body)
           ("C-c t" . hydra-tex/body)
           ("C-c u" . hydra-upload/body)
           ("C-c w" . hydra-windows/body)))

  (use-package major-mode-hydra
    :after hydra
    :preface
    (defun with-alltheicon (icon str &optional height v-adjust face)
      "Displays an icon from all-the-icon"
      (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-faicon (icon str &optional height v-adjust face)
      "Displays an icon from Font Awesome icon."
      (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-fileicon (icon str &optional height v-adjust face)
      "Displays an icon from the Atom File Icons package."
      (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-octicon (icon str &optional height v-adjust face)
      "Displays an icon from the GitHub Octicons."
      (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str)))
#+end_src

*** Hydra/BToggle

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-btoggle
    (:hint nil :color amaranth :quit-key "q" :title (with-faicon "toggle-on" "Toggle" 1 -0.05))
    ("Basic"
     (("a" abbrev-mode "abbrev" :toggle t)
      ("h" global-hungry-delete-mode "hungry delete" :toggle t))
     "Coding"
     (("e" electric-operator-mode "electric operator" :toggle t)
      ("F" flyspell-mode "flyspell" :toggle t)
      ("f" flycheck-mode "flycheck" :toggle t)
      ("l" lsp-mode "lsp" :toggle t)
      ("s" smartparens-mode "smartparens" :toggle t))
     "UI"
     (("i" ivy-rich-mode "ivy-rich" :toggle t))))
#+end_src

*** Hydra/Clock

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-clock
    (:hint nil :color teal :quit-key "q" :title (with-faicon "clock-o" "Clock" 1 -0.05))
    ("Action"
     (("c" org-clock-cancel "cancel")
      ("d" org-clock-display "display")
      ("e" org-clock-modify-effort-estimate "effort")
      ("i" org-clock-in "in")
      ("j" org-clock-goto "jump")
      ("o" org-clock-out "out")
      ("p" org-pomodoro "pomodoro")
      ("r" org-clock-report "report"))))
#+end_src

*** Hydra/Flycheck

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-flycheck
    (:hint nil :color teal :quit-key "q" :title (with-faicon "plane" "Flycheck" 1 -0.05))
    ("Checker"
     (("?" flycheck-describe-checker "describe")
      ("d" flycheck-disable-checker "disable")
      ("m" flycheck-mode "mode")
      ("s" flycheck-select-checker "select"))
     "Errors"
     (("<" flycheck-previous-error "previous" :color pink)
      (">" flycheck-next-error "next" :color pink)
      ("f" flycheck-buffer "check")
      ("l" flycheck-list-errors "list"))
     "Other"
     (("M" flycheck-manual "manual")
      ("v" flycheck-verify-setup "verify setup"))))
#+end_src

*** Hydra/Go To

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-go-to-file
    (:hint nil :color teal :quit-key "q" :title (with-octicon "file-symlink-file" "Go To" 1 -0.05))
    ("Agenda"
     (("ac" (find-file "~/.personal/agenda/contacts.org") "contacts")
      ("ah" (find-file "~/.personal/agenda/home.org") "home")
      ("ai" (find-file "~/.personal/agenda/inbox.org") "inbox")
      ("ap" (find-file "~/.personal/agenda/people.org") "people")
      ("ar" (find-file "~/.personal/agenda/routine.org") "routine")
      ("aw" (find-file "~/.personal/agenda/work.org") "work"))
     "Config"
     (("ca" (find-file (format "%s/alacritty/alacritty.yml" xdg-config)) "alacritty")
      ("cA" (find-file (format "%s/sh/aliases" xdg-config)) "aliases")
      ("ce" (find-file "~/.emacs.d/config.org") "emacs")
      ("cE" (find-file (format "%s/sh/environ" xdg-config)) "environ")
      ("cn" (find-file (format "%s/neofetch/config.conf" xdg-config)) "neofetch")
      ("cr" (find-file (format "%s/ranger/rc.conf" xdg-config)) "ranger")
      ("cs" (find-file (format "%s/sway/config" xdg-config)) "sway")
      ("ct" (find-file (format "%s/tmux/tmux.conf" xdg-config)) "tmux")
      ("cw" (find-file (format "%s/waybar/config" xdg-config)) "waybar")
      ("cW" (find-file (format "%s/wofi/config" xdg-config)) "wofi")
      ("cx" (find-file (format "%s/sh/xdg" xdg-config)) "xdg"))
     "Notes"
     (("na" (find-file (format "~/.personal/notes/affirmations.pdf" xdg-config)) "Affirmations"))
     "Other"
     (("ob" (find-file "~/.personal/other/books.org") "book")
      ("ol" (find-file "~/.personal/other/long-goals.org") "long-terms goals")
      ("om" (find-file "~/.personal/other/movies.org"))
      ("op" (find-file "~/.personal/other/purchases.org") "purchase")
      ("os" (find-file "~/.personal/other/short-goals.org") "short-terms goals")
      ("ou" (find-file "~/.personal/other/usb.org") "usb")
      ("oL" (find-file "~/.personal/other/learning.org") "learning"))))
#+end_src

*** Hydra/Image

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-image
    (:hint nil :color pink :quit-key "q" :title (with-faicon "file-image-o" "Images" 1 -0.05))
    ("Action"
     (("r" image-rotate "rotate")
      ("s" image-save "save" :color teal))
     "Zoom"
     (("-" image-decrease-size "out")
      ("+" image-increase-size "in")
      ("=" image-transform-reset "reset"))))
#+end_src

*** Hydra/Ledger

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-ledger
    (:hint nil :color teal :quit-key "q" :title (with-faicon "usd" "Ledger" 1 -0.05))
    ("Action"
     (("b" ledger-add-transaction "add")
      ("c" ledger-mode-clean-buffer "clean")
      ("i" ledger-copy-transaction-at-point "copy")
      ("s" ledger-delete-current-transaction "delete")
      ("r" ledger-report "report"))))
#+end_src

*** Hydra/Magit

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-magit
    (:hint nil :color teal :quit-key "q" :title (with-octicon "mark-github" "Magit" 1 -0.05))
    ("Action"
     (("b" magit-blame "blame")
      ("c" magit-clone "clone")
      ("i" magit-init "init")
      ("l" magit-log-buffer-file "commit log (current file)")
      ("L" magit-log-current "commit log (project)")
      ("s" magit-status "status"))))
#+end_src

*** Hydra/Merge

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-merge
    (:hint nil :color pink :quit-key "q" :title (with-octicon "mark-github" "Magit" 1 -0.05))
    ("Move"
     (("n" smerge-next "next")
      ("p" smerge-prev "previous"))
     "Keep"
     (("RET" smerge-keep-current "current")
      ("a" smerge-keep-all "all")
      ("b" smerge-keep-base "base")
      ("l" smerge-keep-lower "lower")
      ("u" smerge-keep-upper "upper"))
     "Diff"
     (("<" smerge-diff-base-upper "upper/base")
      ("=" smerge-diff-upper-lower "upper/lower")
      (">" smerge-diff-base-lower "base/lower")
      ("R" smerge-refine "redefine")
      ("E" smerge-ediff "ediff"))
     "Other"
     (("C" smerge-combine-with-next "combine")
      ("r" smerge-resolve "resolve")
      ("k" smerge-kill-current "kill current"))))
#+end_src

*** Hydra/Org

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-org
    (:hint nil :color teal :quit-key "q" :title (with-fileicon "org" "Org" 1 -0.05))
    ("Action"
     (("A" my/org-archive-done-tasks "archive")
      ("a" org-agenda "agenda")
      ("c" org-capture "capture")
      ("d" org-decrypt-entry "decrypt")
      ("i" org-insert-link-global "insert-link")
      ("j" my/org-jump "jump-task")
      ("k" org-cut-subtree "cut-subtree")
      ("o" org-open-at-point-global "open-link")
      ("r" org-refile "refile")
      ("s" org-store-link "store-link")
      ("t" org-show-todo-tree "todo-tree"))))
#+end_src

*** Hydra/Projectile

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-projectile
    (:hint nil :color teal :quit-key "q" :title (with-faicon "rocket" "Projectile" 1 -0.05))
    ("Buffers"
     (("b" projectile-switch-to-buffer "list")
      ("k" projectile-kill-buffers "kill all")
      ("S" projectile-save-project-buffers "save all"))
     "Find"
     (("d" projectile-find-dir "directory")
      ("D" projectile-dired "root")
      ("f" projectile-find-file "file")
      ("p" consult-projectile "project"))
     "Other"
     (("i" projectile-invalidate-cache "reset cache"))
     "Search"
     (("r" projectile-replace "replace")
      ("R" projectile-replace-regexp "regexp replace")
      ("s" counsel-ripgrep "search"))))
#+end_src

*** Hydra/Roam

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-notes
    (:hint nil :color teal :quit-key "q" :title (with-octicon "pencil" "Notes" 1 -0.05))
    ("Notes"
     (("c" org-roam-dailies-capture-today "capture")
      ("C" org-roam-dailies-capture-tomorrow "capture tomorrow")
      ("g" org-roam-graph "graph")
      ("f" org-roam-node-find "find")
      ("i" org-roam-node-insert "insert"))
     "Go To"
     ((">" org-roam-dailies-goto-next-note "next note")
      ("<" org-roam-dailies-goto-previous-note "previous note")
      ("d" org-roam-dailies-goto-date "date")
      ("t" org-roam-dailies-goto-today "today")
      ("T" org-roam-dailies-goto-tomorrow "tomorrow")
      ("y" org-roam-dailies-goto-yesterday "yesterday"))))
#+end_src

*** Hydra/Spelling

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-spelling
    (:hint nil :color teal :quit-key "q" :title (with-faicon "magic" "Spelling" 1 -0.05))
    ("Checker"
     (("c" langtool-correct-buffer "correction")
      ("C" langtool-check-done "clear")
      ("d" ispell-change-dictionary "dictionary")
      ("l" (message "Current language: %s (%s)" langtool-default-language ispell-current-dictionary) "language")
      ("s" my/switch-language "switch")
      ("w" wiki-summary "wiki"))
     "Errors"
     (("<" flyspell-correct-previous "previous" :color pink)
      (">" flyspell-correct-next "next" :color pink)
      ("f" langtool-check "find"))))
#+end_src

*** Hydra/TeX

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-tex
    (:hint nil :color teal :quit-key "q" :title (with-fileicon "tex" "LaTeX" 1 -0.05))
    ("Action"
     (("g" reftex-goto-label "goto")
      ("r" reftex-query-replace-document "replace")
      ("s" counsel-rg "search")
      ("t" reftex-toc "table of contents"))))
#+end_src

*** Hydra/Tool

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-tool
    (:hint nil :color teal :quit-key "q" :title (with-faicon "briefcase" "Tool" 1 -0.05))
    ("Network"
     (("c" ipcalc "subnet calculator")
      ("i" ipinfo "ip info"))))
#+end_src

*** Hydra/TypeScript

#+begin_src emacs-lisp
  (defhydra hydra-typescript (:color blue)
    "
    ^
    ^TypeScript^    ^Do^
    ^----------^----^--^---------
    _q_ quit        _b_ back
    ^^              _e_ errors
    ^^              _j_ jump
    ^^              _r_ references
    ^^              _R_ restart
    ^^              ^^
    "
    ("q" nil)
    ("b" tide-jump-back)
    ("e" tide-project-errors)
    ("j" tide-jump-to-definition)
    ("r" tide-references)
    ("R" tide-restart-server))
#+end_src

*** Hydra/Upload

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-upload
    (:hint nil :color teal :quit-key "q" :title (with-faicon "cloud-upload" "Upload" 1 -0.05))
    ("Action"
     (("b" webpaste-paste-buffer "buffer")
      ("i" imgbb-upload "image")
      ("r" webpaste-paste-region "region"))))
#+end_src

*** Hydra/Windows

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-windows
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "windows" "Windows" 1 -0.05))
    ("Window"
     (("b" balance-windows "balance")
      ("i" enlarge-window "heighten")
      ("j" shrink-window-horizontally "narrow")
      ("k" shrink-window "lower")
      ("u" winner-undo "undo")
      ("r" winner-redo "redo")
      ("l" enlarge-window-horizontally "widen")
      ("s" switch-window-then-swap-buffer "swap" :color teal))
     "Zoom"
     (("-" text-scale-decrease "out")
      ("+" text-scale-increase "in")
      ("=" (text-scale-increase 0) "reset"))))
#+end_src

** Icons

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :config (unless (find-font (font-spec :name "all-the-icons"))
              (all-the-icons-install-fonts t)))
#+end_src

** Indentations

#+begin_src emacs-lisp
  (use-package aggressive-indent
    :custom (aggressive-indent-comments-too t))

  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom (highlight-indent-guides-method 'character))
#+end_src

** Linters

#+begin_src emacs-lisp
  (use-package flycheck
    :delight
    :hook (lsp-mode . flycheck-mode)
    :bind (:map flycheck-mode-map
                ("M-'". flycheck-previous-error)
                ("M-\\" . flycheck-next-error))
    :custom (flycheck-display-errors-delay .3))
#+end_src

** Email

#+begin_src emacs-lisp
    (use-package mu4e
      :ensure nil
      :ensure-system-package mu
      :commands mu4e
      :hook (mu4e-compose-mode . turn-off-auto-fill)
      :bind (:map mu4e-headers-mode-map
                  ("M-[" . scroll-down-command)
                  ("M-]" . scroll-up-command))
      :preface
      (defun my/set-email-account (label letvars)
        "Registers an email address for mu4e."
        (setq mu4e-contexts
              (cl-loop for context in mu4e-contexts
                       unless (string= (mu4e-context-name context) label)
                       collect context))
        (let ((context (make-mu4e-context
                        :name label
                        :enter-func (lambda () (mu4e-message "Switched context"))
                        :leave-func #'mu4e-clear-caches
                        :match-func
                        (lambda (msg)
                          (when msg
                            (string-prefix-p (format "/%s" msg)
                                             (mu4e-message-field msg :maildir))))
                        :vars letvars)))
          (push context mu4e-contexts)
          context))
      :custom
      (mu4e-attachment-dir "~/Downloads")
      ;; To avoid synchronization issues/ with mbsync
      (mu4e-change-filenames-when-moving t)
      (mu4e-confirm-quit nil)
      (mu4e-completing-read-function 'ivy-read)
      (mu4e-compose-complete-only-after (format-time-string
                                         "%Y-%m-%d"
                                         (time-subtract (current-time) (days-to-time 150))))
      (mu4e-compose-context-policy 'ask-if-none)
      (mu4e-compose-dont-reply-to-self t)
      (mu4e-compose-format-flowed t)
      (mu4e-get-mail-command (format "mbsync -c '%s/isync/mbsyncrc' -a" xdg-config))
      (mu4e-headers-date-format "%F")
      (mu4e-headers-fields
       '((:account    . 10)
         (:human-date . 12)
         (:flags      . 6)
         (:from       . 22)
         (:subject    . nil)))
      (mu4e-headers-time-format "%R")
      (mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain")
      (mu4e-maildir "~/mails")
      (mu4e-org-contacts-file "~/.personal/agenda/contacts.org")
      (mu4e-update-interval (* 5 60))
      (mu4e-use-fancy-chars t)
      (mu4e-view-prefer-html t)
      (mu4e-view-show-addresses t)
      (mu4e-view-show-images t)
      :config
      (my/set-email-account "karolos-triantafyllou"
                            '((mu4e-drafts-folder . "/personal/karolos-triantafyllou/drafts")
                              (mu4e-refile-folder . "/personal/karolos-triantafyllou/all")
                              (mu4e-sent-folder   . "/personal/karolos-triantafyllou/sent")
                              (mu4e-trash-folder  . "/personal/karolos-triantafyllou/trash")
                              (mu4e-maildir-shortcuts . ((:maildir "/personal/karolos-triantafyllou/all"    :key ?a)
                                                         (:maildir "/personal/karolos-triantafyllou/inbox"  :key ?i)
                                                         (:maildir "/personal/karolos-triantafyllou/drafts" :key ?d)
                                                         (:maildir "/personal/karolos-triantafyllou/sent"   :key ?s)
                                                         (:maildir "/personal/karolos-triantafyllou/trash"  :key ?t)))
                              (smtpmail-smtp-user . "karolos.triantafyllou@gmail.com")
                              (smtpmail-smtp-server . "smtp.gmail.com")
                              (smtpmail-smtp-service . 465)
                              (smtpmail-stream-type . ssl)
                              (user-mail-address . "karolos.triantafyllou@gmail.com")
                              (user-full-name . "Karolos Triantafyllou")))
      (setq mu4e-headers-attach-mark    `("a" . ,(with-faicon "paperclip" "" 0.75 -0.05 "all-the-icons-lyellow"))
            mu4e-headers-draft-mark     `("D" . ,(with-octicon "pencil" "" 0.75 -0.05 "all-the-icons-lsilver"))
            mu4e-headers-encrypted-mark `("x" . ,(with-faicon "lock" "" 0.75 -0.05 "all-the-icons-lred"))
            mu4e-headers-flagged-mark   `("F" . ,(with-faicon "flag" "" 0.75 -0.05 "all-the-icons-maroon"))
            mu4e-headers-new-mark       `("N" . ,(with-faicon "check-circle" "" 0.75 -0.05 "all-the-icons-silver"))
            mu4e-headers-passed-mark    `("P" . ,(with-faicon "share" "" 0.75 -0.05 "all-the-icons-purple "))
            mu4e-headers-replied-mark   `("R" . ,(with-faicon "reply" "" 0.75 -0.05 "all-the-icons-lgreen"))
            mu4e-headers-seen-mark      `("S" . ,(with-octicon "check" "" 1 -0.05 "all-the-icons-lgreen"))
            mu4e-headers-signed-mark    `("s" . ,(with-faicon "key" "" 0.75 -0.05 "all-the-icons-cyan"))
            mu4e-headers-trashed-mark   `("T" . ,(with-faicon "trash" "" 0.75 -0.05 "all-the-icons-lred"))
            mu4e-headers-unread-mark    `("u" . ,(with-faicon "envelope" "" 0.75 -0.05 "all-the-icons-silver")))
      (add-to-list 'mu4e-header-info-custom
                   '(:account
                     :name "Account"
                     :shortname "Account"
                     :help "Which account this email belongs to"
                     :function
                     (lambda (msg)
                       (let ((maildir (mu4e-message-field msg :maildir)))
                         (format "%s" (substring maildir 1 (string-match-p "/" maildir 1)))))))
      (add-to-list 'mu4e-headers-actions '("org-contact-add" . mu4e-action-add-org-contact) t)
      (add-to-list 'mu4e-view-actions '("org-contact-add" . mu4e-action-add-org-contact) t))

    (use-package org-mime
    :after mu4e
    :hook (message-send . org-mime-htmlize)
    :bind (:map mu4e-compose-mode-map
                ("C-c '" . org-mime-edit-mail-in-org-mode))
    :config
    (add-hook 'org-mime-html-hook (lambda ()
                                    (goto-char (point-max))
                                    (insert "--<br>
                   <strong>Karolos Triantafyllou</strong><br>")))
    (add-hook 'org-mime-html-hook (lambda ()
                                    (org-mime-change-element-style "p" (format "color: %s" "#1a1a1a"))))

    (add-hook 'org-mime-html-hook (lambda ()
                                    (org-mime-change-element-style "strong" (format "color: %s" "#000"))))

    (add-hook 'org-mime-html-hook (lambda ()
                                    (org-mime-change-element-style
                                     "pre" "background: none repeat scroll 0% 0% rgb(61, 61, 61);
                                                   border-radius: 15px;
                                                   color: #eceff4;
                                                   font-family: Courier, 'Courier New', monospace;
                                                   font-size: small;
                                                   font-weight: 400;                                                 line-height: 1.3em;
                                                   padding: 20px;
                                                   quotes: '«' '»';
                                                   width: 41%;")))
    (setq org-mime-export-options '(:preserve-breaks t
                                                     :section-numbers nil
                                                     :with-author nil
                                                     :with-toc nil)))

    (use-package mu4e-alert
    :hook ((after-init . mu4e-alert-enable-mode-line-display)
           (after-init . mu4e-alert-enable-notifications))
    :config (mu4e-alert-set-default-style 'libnotify))

  (use-package message
    :ensure nil
    :after mu4e
    :custom
    (message-citation-line-format "On %B %e, %Y at %l:%M %p, %f (%n) wrote:\n")
    (message-citation-line-function 'message-insert-formatted-citation-line)
    (message-kill-buffer-on-exit t)
    (message-send-mail-function 'smtpmail-send-it)
    (mml-secure-openpgp-signers '("84D878C99B99611D")))
#+end_src

** Money Management

#+begin_src emacs-lisp
  (use-package ledger-mode
    :mode ("\\.\\(dat\\|ledger\\)\\'")
    :preface
    (defun my/ledger-save ()
      "Clean the ledger buffer at each save."
      (interactive)
      (ledger-mode-clean-buffer)
      (save-buffer))
    :bind (:map ledger-mode-map
                ("C-x C-s" . my/ledger-save))
    :hook (ledger-mode . ledger-flymake-enable)
    :custom
    (ledger-clear-whole-transactions t)
    (ledger-reconcile-default-commodity "EUR")
    (ledger-reports
     '(("account statement" "%(binary) reg --real [[ledger-mode-flags]] -f %(ledger-file) ^%(account)")
     ("balance sheet" "%(binary) --real [[ledger-mode-flags]] -f %(ledger-file) bal ^assets ^liabilities ^equity")
     ("budget" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:budget")
     ("budget goals" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget goals'")
     ("budget obligations" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget obligations'")
     ("budget debts" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget debts'")
     ("cleared" "%(binary) cleared [[ledger-mode-flags]] -f %(ledger-file)")
     ("equity" "%(binary) --real [[ledger-mode-flags]] -f %(ledger-file) equity")
     ("income statement" "%(binary) --invert --real -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^income ^expenses -p \"this month\""))
     (ledger-report-use-header-line nil)))

  (use-package flycheck-ledger :after ledger-mode)
#+end_src

** Package Menu

#+begin_src emacs-lisp
  (use-package paradox
    :defer 1
    :custom
    (paradox-column-width-package 25)
    (paradox-display-star-count nil)
    (paradox-execute-asynchronously t)
    (paradox-hide-wiki-packages t)
    :config
    (paradox-enable))
#+end_src

** Parentheses

#+begin_src emacs-lisp
  (use-package faces
    :ensure nil
    :custom (show-paren-delay 0)
    :config
    (set-face-background 'show-paren-match "#161719")
    (set-face-bold 'show-paren-match t)
    (set-face-foreground 'show-paren-match "#ffffff"))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package smartparens
    :delight
    :hook (prog-mode . smartparens-mode)
    :bind (("M-'" . sp-backward-sexp)
           ("M-\\" . sp-forward-sexp)
           ("M-(" . sp-wrap-round)
           ("M-[" . sp-wrap-curly))
    :custom (sp-escape-quotes-after-insert nil))
#+end_src

** Paste

#+begin_src emacs-lisp
  (use-package webpaste
    :defer 0.4
    :bind (("C-c C-p C-b" . webpaste-paste-buffer)
           ("C-c C-p C-p" . webpaste-paste-buffer-or-region)
           ("C-c C-p C-r" . webpaste-paste-region))
    :custom (webpaste-provider-priority '("dpaste.org" "dpaste.com" "ix.io")))

  (use-package imgbb
    :commands imgbb-upload
    :bind ("C-c C-p C-i" . imgbb-upload))
#+end_src

** PDF

#+begin_src emacs-lisp
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :init (pdf-tools-install :no-query))

  (use-package pdf-view
    :ensure nil
    :after pdf-tools
    :bind (:map pdf-view-mode-map
                ("C-s" . isearch-forward)
                ("d" . pdf-annot-delete)
                ("h" . pdf-annot-add-highlight-markup-annotation)
                ("t" . pdf-annot-add-text-annotation))
    :custom
    (pdf-view-display-size 'fit-page)
    (pdf-view-resize-factor 1.1)
    ;; Avoid searching for unicodes to speed up pdf-tools.
    (pdf-view-use-unicode-ligther nil)
    ;; Enable HiDPI support, at the cost of memory.
    (pdf-view-use-scaling t))
#+end_src

** Project Interactions

#+begin_src emacs-lisp
  (use-package projectile
    :diminish (projectile-mode)
    :custom
    (projectile-cache-file (expand-file-name (format "%s/emacs/projectile.cache" xdg-cache)))
    (projectile-enable-caching t)
    (projectile-keymap-prefix (kbd "C-c C-p"))
    (projectile-known-projects-file (expand-file-name (format "%s/emacs/projectile-bookmarks.eld" xdg-cache)))
    (projectile-mode-line '(:eval (projectile-project-name)))
    ;; Define the folder containing git repositories (e.g. ~/.local/share/git).
    (projectile-project-search-path '("~/Programming"))
    (projectile-switch-project-action #'projectile-dired)
    :config (projectile-global-mode))

  (use-package consult-projectile
    :after (consult projectile)
    :straight (consult-projectile :type git :host gitlab :repo
                                  "OlMon/consult-projectile" :branch "master")
    :commands (consult-projectile))

  (use-package ibuffer-projectile
    :after ibuffer
    :preface
    (defun my/ibuffer-projectile ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic)))
    :hook (ibuffer . my/ibuffer-projectile))
#+end_src

** Snippets

#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :after yasnippet
    :config (yasnippet-snippets-initialize))

  (use-package yasnippet
    :delight yas-minor-mode "υ"
    :hook (yas-minor-mode . my/disable-yas-if-no-snippets)
    :config (yas-global-mode)
    :preface
    (defun my/disable-yas-if-no-snippets ()
      (when (and yas-minor-mode (null (yas--get-snippet-tables)))
        (yas-minor-mode -1))))

  (use-package ivy-yasnippet :after yasnippet)
  (use-package react-snippets :after yasnippet)
#+end_src

** Spaces Around Operators

#+begin_src emacs-lisp
  (use-package electric-operator
    :delight
    :hook ((css-mode java-mode js2-mode python-mode sql-mode typescript-mode) . electric-operator-mode))
#+end_src

** Recent Files

#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :bind ("C-x C-r" . recentf-open-files)
    :init (recentf-mode)
    :custom
    (recentf-exclude (list "/scp:"
                           "/ssh:"
                           "/sudo:"
                           "/tmp/"
                           "~$"
                           "COMMIT_EDITMSG"))
    (recentf-max-menu-items 15)
    (recentf-max-saved-items 200)
    (recentf-save-file (expand-file-name (format "%s/emacs/recentf" xdg-cache)))
    ;; Save recent files every 5 minutes to manage abnormal output
    :config (run-at-time nil (* 5 60) 'recentf-save-list))
#+end_src

** Term Definitions

#+begin_src emacs-lisp
  (use-package wiki-summary
    :commands (wiki-summary wiki-summary-insert)
    :bind("C-c W" . wiki-summary)
    :preface
    (defun my/format-summary-in-buffer (summary)
      "Given a summary, sticks it in the *wiki-summary* buffer and displays the buffer."
      (let ((buf (generate-new-buffer "*wiki-summary*")))
        (with-current-buffer buf
          (princ summary buf)
          (fill-paragraph)
          (goto-char (point-min))
          (view-mode))
        (pop-to-buffer buf)))
    :config
    (advice-add 'wiki-summary/format-summary-in-buffer :override #'my/format-summary-in-buffer))
#+end_src

** Try packages

#+begin_src emacs-lisp
  (use-package try :commands try)
#+end_src

** Version Control System

#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package git-commit
    :ensure nil
    :preface
    (defun my/git-commit-auto-fill-everywhere ()
      "Ensures that the commit body does not exceed 72 characters."
      (setq fill-column 72)
      (setq-local comment-auto-fill-only-comments nil))
    :hook (git-commit-mode . my/git-commit-auto-fill-everywhere)
    :custom (git-commit-summary-max-length 50))

  (use-package smerge-mode
    :after hydra
    :delight "∓"
    :commands smerge-mode
    :bind (:map smerge-mode-map
                ("M-g n" . smerge-next)
                ("M-g p" . smerge-prev))
    :hook (magit-diff-visit-file . hydra-merge/body))

  (use-package git-gutter
    :defer 0.3
    :delight
    :config (global-git-gutter-mode))
#+end_src

** Whitespaces and Kill

#+begin_src emacs-lisp
  (use-package simple
    :ensure nil
    :delight (auto-fill-function)
    :preface
    (defun my/kill-region-or-line ()
      "When called interactively with no active region, kill the whole line."
      (interactive)
      (if current-prefix-arg
          (progn
            (kill-new (buffer-string))
            (delete-region (point-min) (point-max)))
        (progn (if (use-region-p)
                   (kill-region (region-beginning) (region-end) t)
                 (kill-region (line-beginning-position) (line-beginning-position 2))))))
    :hook ((before-save . delete-trailing-whitespace)
           ((prog-mode text-mode) . turn-on-auto-fill))
    :bind ("C-w" . my/kill-region-or-line)
    :custom (set-mark-command-repeat-pop t))

  (use-package hungry-delete
    :defer 0.7
    :delight
    :config (global-hungry-delete-mode))
#+end_src

** Undo-tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :delight
    :bind ("C--" . undo-tree-redo)
    :init (global-undo-tree-mode)
    :custom
    (undo-tree-visualizer-timestamps t)
    (undo-tree-visualizer-diff t))
#+end_src

** Multiple cursors

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)))
#+end_src

* Org Mode

** First steps

#+begin_src emacs-lisp
  ;; TODO: fix
  (use-package org
    :ensure org-contrib
    :delight "Θ"
    :hook (org-mode . turn-off-auto-fill)
    :bind ("C-c i" . org-insert-structure-template)
    :preface
    (defun my/org-archive-done-tasks ()
      "Archive finished or cancelled tasks."
      (interactive)
      (org-map-entries
       (lambda ()
         (org-archive-subtree)
         (setq org-map-continue-from (outline-previous-heading)))
       "TODO=\"DONE\"|TODO=\"CANCELLED\"" (if (org-before-first-heading-p) 'file 'tree)))

    (defun my/org-jump ()
      "Jump to a specific task."
      (interactive)
      (let ((current-prefix-arg '(4)))
        (call-interactively 'org-refile)))

    (defun my/org-use-speed-commands-for-headings-and-lists ()
      "Activate speed commands on list items too."
      (or (and (looking-at org-outline-regexp) (looking-back "^\**"))
          (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*")))))

    (defmacro ignore-args (fnc)
      "Return function that ignores its arguments and invokes FNC."
      `(lambda (&rest _rest)
         (funcall ,fnc)))

    :hook ((after-save . my/config-tangle)
           (auto-save . org-save-all-org-buffers)
           (org-mode . org-indent-mode)
           (org-mode . visual-line-mode))
    :custom
    (org-archive-location "~/.personal/archives/%s::")
    (org-blank-before-new-entry '((heading . t) (plain-list-item . t)))
    (org-confirm-babel-evaluate nil)
    (org-cycle-include-plain-lists 'integrate)
    (org-ellipsis " ▾")
    (org-export-backends '(ascii beamer html icalendar latex man md org texinfo))
    (org-hide-emphasis-markers t)
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-modules '(org-crypt
                   org-habit
                   org-mouse
                   org-protocol
                   org-tempo))
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-refile-use-cache nil)
    (org-refile-use-outline-path nil)
    (org-refile-targets '((org-agenda-files . (:maxlevel . 1))))
    (org-startup-folded nil)
    (org-startup-with-inline-images t)
    (org-tag-alist '((:startgroup . "Context")
                     ("@errands" . ?e)
                     ("@home" . ?h)
                     ("@work" . ?w)
                     (:endgroup)
                     (:startgroup . "Difficulty")
                     ("easy" . ?E)
                     ("medium" . ?M)
                     ("challenging" . ?C)
                     (:endgroup)
                     ("bug" . ?b)
                     ("car" . ?v)
                     ("future" . ?F)
                     ("goal" . ?g)
                     ("health" . ?H)
                     ("house" . ?O)
                     ("meeting" . ?m)
                     ("planning" . ?p)
                     ("phone" . ?0)
                     ("purchase" . ?P)
                     ("reading" . ?r)
                     ("review" . ?R)
                     ("study" . ?s)
                     ("sport" . ?S)
                     ("talk" . ?T)
                     ("tech" . ?t)
                     ("trip" . ?I)
                     ("thinking" . ?i)
                     ("update" . ?u)
                     ("watch" . ?W)
                     ("writing" . ?g)))
    (org-tags-exclude-from-inheritance '("crypt" "project"))
    (org-todo-keywords '((sequence "TODO(t)"
                                   "STARTED(s)"
                                   "NEXT(n)"
                                   "SOMEDAY(.)"
                                   "WAITING(w)""|" "DONE(x!)" "CANCELLED(c@)")))
    (org-use-effective-time t)
    (org-use-speed-commands 'my/org-use-speed-commands-for-headings-and-lists)
    (org-yank-adjusted-subtrees t)
    :config
    (add-to-list 'org-global-properties '("Effort_ALL" . "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))
    (add-to-list 'org-speed-commands '("$" call-interactively 'org-archive-subtree))
    (add-to-list 'org-speed-commands '("i" call-interactively 'org-clock-in))
    (add-to-list 'org-speed-commands '("o" call-interactively 'org-clock-out))
    (add-to-list 'org-speed-commands '("s" call-interactively 'org-schedule))
    (add-to-list 'org-speed-commands '("x" org-todo "DONE"))
    (add-to-list 'org-speed-commands '("y" org-todo-yesterday "DONE"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (advice-add 'org-deadline :after (ignore-args #'org-save-all-org-buffers))
    (advice-add 'org-schedule :after (ignore-args #'org-save-all-org-buffers))
    (advice-add 'org-store-log-note :after (ignore-args #'org-save-all-org-buffers))
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    (advice-add 'org-todo :after (ignore-args #'org-save-all-org-buffers))
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    (org-clock-persistence-insinuate)
    (org-load-modules-maybe t))

  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-enable))

  (use-package org-indent :ensure nil :after org :delight)
#+end_src

#+RESULTS:


** Agenda

#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure nil
    :bind (:map org-agenda-mode-map
                ("C-n" . org-agenda-next-item)
                ("C-p" . org-agenda-previous-item)
                ("j" . org-agenda-goto)
                ("X" . my/org-agenda-mark-done-next)
                ("x" . my/org-agenda-mark-done))
    :preface
    (defun my/org-agenda-mark-done (&optional arg)
      "Mark the current TODO as done in org-agenda."
      (interactive "P")
      (org-agenda-todo "DONE"))

    (defun my/org-agenda-mark-done-next ()
      "Mark the current TODO as done and add another task after it."
      (interactive)
      (org-agenda-todo "DONE")
      (org-agenda-switch-to)
      (org-capture 0 "t"))
    :custom
    (org-agenda-category-icon-alist
     `(("home" ,(list (all-the-icons-faicon "home" :v-adjust -0.05)) nil nil :ascent center :mask heuristic)
       ("inbox" ,(list (all-the-icons-faicon "inbox" :v-adjust -0.1)) nil nil :ascent center :mask heuristic)
       ("people" ,(list (all-the-icons-material "people" :v-adjust -0.25)) nil nil :ascent center :mask heuristic)
       ("routine" ,(list (all-the-icons-material "repeat" :v-adjust -0.25)) nil nil :ascent center :mask heuristic)
       ))
    (org-agenda-custom-commands
     '(("d" "Dashboard"
        ((agenda "" ((org-deadline-warning-days 7)))
         (todo "NEXT"
               ((org-agenda-overriding-header "Next Tasks")))
         (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
       ("n" "Next Tasks"
        ((agenda "" ((org-deadline-warning-days 7)))
         (todo "NEXT"
               ((org-agenda-overriding-header "Next Tasks")))))
       ("h" "Home Tasks" tags-todo "+home")
       ("w" "Work Tasks" tags-todo "+work")

       ("E" "Easy Tasks" tags-todo "+easy")
       ("C" "Challenging Tasks" tags-todo "+challenging")

       ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
        ((org-agenda-overriding-header "Low Effort Tasks")
         (org-agenda-max-todos 20)
         (org-agenda-files org-agenda-files)))))
    (org-agenda-dim-blocked-tasks t)
    (org-agenda-files '("~/.personal/agenda"))
    (org-agenda-inhibit-startup t)
    (org-agenda-show-log t)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-span 2)
    (org-agenda-start-on-weekday 6)
    (org-agenda-start-with-log-mode t)
    (org-agenda-sticky nil)
    (org-agenda-tags-column 90)
    (org-agenda-time-grid '((daily today require-timed)))
    (org-agenda-use-tag-inheritance t)
    (org-columns-default-format "%14SCHEDULED %Effort{:} %1PRIORITY %TODO %50ITEM %TAGS")
    (org-default-notes-file "~/.personal/agenda/inbox.org")
    (org-directory "~/.personal")
    (org-enforce-todo-dependencies t)
    (org-habit-completed-glyph ?✓)
    (org-habit-graph-column 80)
    (org-habit-show-habits-only-for-today nil)
    (org-habit-today-glyph ?‖)
    (org-track-ordered-property-with-tag t))

  (use-package org-wild-notifier
    :after org
    :custom
    (alert-default-style 'libnotify)
    (org-wild-notifier-notification-title "Agenda Reminder")
    :config (org-wild-notifier-mode))
#+end_src

** Bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom (org-bullets-bullet-list '("●" "►" "▸")))
#+end_src

** Capture

#+begin_src emacs-lisp
  (use-package org-capture
    :ensure nil
    :preface
    (defvar my/org-active-task-template
      (concat "* NEXT %^{Task}\n"
              ":PROPERTIES:\n"
              ":Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n"
              ":CAPTURED: %<%Y-%m-%d %H:%M>\n"
              ":END:") "Template for basic task.")
    (defvar my/org-appointment
      (concat "* TODO %^{Appointment}\n"
              "SCHEDULED: %t\n") "Template for appointment task.")
    (defvar my/org-basic-task-template
      (concat "* TODO %^{Task}\n"
              ":PROPERTIES:\n"
              ":Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n"
              ":CAPTURED: %<%Y-%m-%d %H:%M>\n"
              ":END:") "Template for basic task.")
    (defvar my/org-contacts-template
      (concat "* %(org-contacts-template-name)\n"
              ":PROPERTIES:\n"
              ":BIRTHDAY: %^{YYYY-MM-DD}\n"
              ":END:") "Template for a contact.")
    :custom
    (org-capture-templates
     `(("c" "Contact" entry (file+headline "~/.personal/agenda/contacts.org" "Friends"),
        my/org-contacts-template :empty-lines 1)
       ("p" "People" entry (file+headline "~/.personal/agenda/people.org" "Tasks"),
        my/org-basic-task-template :empty-lines 1)
       ("a" "Appointment" entry (file+headline "~/.personal/agenda/people.org" "Appointments"),
        my/org-appointment :empty-lines 1)
       ("m" "Meeting" entry (file+headline "~/.personal/agenda/people.org" "Meetings")
        "* Meeting with %? :meeting:\n%U" :clock-in t :clock-resume t :empty-lines 1)
       ("P" "Phone Call" entry (file+headline "~/.personal/agenda/people.org" "Phone Calls")
        "* Phone %? :phone:\n%U" :clock-in t :clock-resume t)

       ("i" "New Item")
       ("ib" "Book" checkitem (file+headline "~/.personal/items/books.org" "Books")
        "- [ ] %^{Title} -- %^{Author} %? :@home:reading:\n%U"
        :immediate-finish t)
       ("il" "Learning" checkitem (file+headline "~/.personal/items/learning.org" "Things")
        "- [ ] %^{Thing} :@home:"
        :immediate-finish t)
       ("im" "Movie" checkitem (file+headline "~/.personal/items/movies.org" "Movies")
        "- [ ] %^{Title}  :@home:watch:\n%U"
        :immediate-finish t)
       ("ip" "Purchase" checkitem (file+headline "~/.personal/items/purchases.org" "Purchases")
        "- [ ] %^{Item}  :@home:purchase:\n%U"
        :immediate-finish t)

       ("t" "New Task")
       ("ta" "Active" entry (file+headline "~/.personal/agenda/inbox.org" "Active"),
        my/org-active-task-template
        :empty-lines 1
        :immediate-finish t)
  ("tb" "Backlog" entry (file+headline "~/.personal/agenda/inbox.org" "Backlog"),
              my/org-basic-task-template
              :empty-lines 1
              :immediate-finish t))))
#+end_src

** Clock

#+begin_src emacs-lisp
  (use-package org-clock
    :ensure nil
    :after org
    :preface
    (defun my/org-mode-ask-effort ()
      "Ask for an effort estimate when clocking in."
      (unless (org-entry-get (point) "Effort")
        (let ((effort
               (completing-read
                "Effort: "
                (org-entry-get-multivalued-property (point) "Effort"))))
          (unless (equal effort "")
            (org-set-property "Effort" effort)))))
    :hook (org-clock-in-prepare-hook . my/org-mode-ask-effort)
    :custom
    (org-clock-clocktable-default-properties
     '(:block day :maxlevel 2 :scope agenda :link t :compact t :formula %
              :step day :fileskip0 t :stepskip0 t :narrow 80
              :properties ("Effort" "CLOCKSUM" "CLOCKSUM_T" "TODO")))
    (org-clock-continuously nil)
    (org-clock-in-switch-to-state "STARTED")
    (org-clock-out-remove-zero-time-clocks t)
    (org-clock-persist t)
    (org-clock-persist-file (expand-file-name (format "%s/emacs/org-clock-save.el" xdg-cache)))
    (org-clock-persist-query-resume nil)
    (org-clock-report-include-clocking-task t)
    (org-show-notification-handler (lambda (msg) (alert msg))))

  (use-package org-pomodoro
    :after org
    :custom
    (alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil))))
    (org-pomodoro-audio-player "/usr/bin/mpv")
    (org-pomodoro-finished-sound "~/Audio/pomodoro_finished.mp3")
    (org-pomodoro-format " %s")
    (org-pomodoro-killed-sound "~/Audio/pomodoro_killed.mp3")
    (org-pomodoro-long-break-sound "~/Audio/pomodoro_long.mp3")
    (org-pomodoro-overtime-sound "~/Audio/pomodoro_overtime.mp3")
    (org-pomodoro-short-break-sound "~/Audio/pomodoro_short.mp3")
    (org-pomodoro-start-sound "~/Audio/pomodoro_start.mp3")
    (org-pomodoro-start-sound-p t))
#+end_src

** Contacts

#+begin_src emacs-lisp
  (use-package org-contacts
    :ensure nil
    :after org
    :custom (org-contacts-files '("~/.personal/agenda/contacts.org")))
#+end_src

** Faces

#+begin_src emacs-lisp
  (use-package org-faces
    :ensure nil
    :custom
    (org-todo-keyword-faces
     '(("DONE"    . (:foreground "#8abeb7" :weight bold))
       ("NEXT"    . (:foreground "#f0c674" :weight bold))
       ("SOMEDAY" . (:foreground "#b294bb" :weight bold))
       ("TODO"    . (:foreground "#b5bd68" :weight bold))
       ("WAITING" . (:foreground "#de935f" :weight bold)))))
#+end_src

** COMMENT Encryption/Decryption

#+begin_src emacs-lisp
  (use-package org-crypt
    :ensure nil
    :init (org-crypt-use-before-save-magic)
    :custom (org-crypt-key 8F4E3CEEA8CAE6040E88CF2784D878C99B99611D))

  (setq epa-file-encrypt-to "karolos.triantafyllou@gmail.com")
  (setq epa-file-select-keys "auto")
#+end_src

** Languages

#+begin_src emacs-lisp
  ;;(use-package jupyter :ensure nil :after org)
  (use-package python :ensure nil :after org)
  (use-package ob-C :ensure nil :after org)
  (use-package ob-css :ensure nil :after org)
  (use-package ob-dot :ensure nil :after org)
  ;;(use-package ob-ein :ensure nil :after org)
  (use-package ob-emacs-lisp :ensure nil :after org)
  (use-package ob-gnuplot :ensure nil :after org)
  (use-package ob-java :ensure nil :after org)
  (use-package ob-js :ensure nil :after org)

  (use-package ob-latex
    :ensure nil
    :after org
    :custom (org-latex-compiler "xelatex"))

  (use-package ob-ledger :ensure nil :after org)
  (use-package ob-makefile :ensure nil :after org)
  (use-package ob-org :ensure nil :after org)

  (use-package ob-plantuml
    :ensure nil
    :after org
    :custom (org-plantuml-jar-path (expand-file-name (format "%s/plantuml.jar" xdg-lib))))

  (use-package ob-python :ensure nil :after org)
  (use-package ob-shell :ensure nil :after org)
  (use-package ob-sql :ensure nil :after org)
#+end_src

** Journal

#+begin_src emacs-lisp
  (use-package org-roam
    :after org
    :init
    (setq org-roam-v2-ack t)
    (setq my/daily-note-filename "%<%Y-%m-%d>.org.gpg"
          my/daily-note-header "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
    :custom
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n")
        :unnarrowed t)))
    (org-roam-completion-everywhere t)
    (org-roam-dailies-directory "journal/")
    (org-roam-dailies-capture-templates
     `(("d" "default" plain
        "* %?"
        :if-new (file+head ,my/daily-note-filename
                           ,my/daily-note-header)
        :empty-lines 1)

       ("j" "journal" plain
        "** %<%I:%M %p>  :journal:\n\n%?\n\n"
        :if-new (file+head+olp ,my/daily-note-filename
                               ,my/daily-note-header
                               ("Journal"))
        :empty-lines 1)
       ("m" "meeting" entry
        "** %<%I:%M %p> - %^{Meeting Title}  :meeting:\n\n%?\n\n"
        :if-new (file+head+olp ,my/daily-note-filename
                               ,my/daily-note-header
                               ("Meetings"))
        :empty-lines 1)))
    (org-roam-directory "~/.personal/notes")
    :custom (org-roam-graph-viewer "/usr/bin/qutebrowser")
    :config (org-roam-setup))
#+end_src
